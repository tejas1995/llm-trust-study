(()=>{"use strict";let e="https://tejassrinivasan.pythonanywhere.com/";async function t(t){t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="trialrun_studies"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",e+"log");try{let i=await $.ajax(e+"log",{data:JSON.stringify({project:"llm-trust-study/"+t.url_data.study_id,uid:globalThis.uid+"_"+t.url_data.prolific_id,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((e=>setTimeout(e,2e3)))}(),i}catch(e){console.log(e)}}var i=!1,o=[];let n,a,s=-1,r=null,c=!1,l=!1,d=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],_=0,u=-1,b=-1,m=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],p=-1,v=0,w=0;function g(e){if(-1!=p)return;const t=document.getElementById(`source_${e}_span`);t&&(t.style.display="block"==t.style.display?"none":"block");const i=document.getElementById(`source_${e}_dropbtn`);i&&(i.className="arrow right"==i.className?"arrow down":"arrow right"),0==d[e]&&(d[e]=!0,m[e]=Date.now()-a)}function h(e){if(-1!=s){n=!!e,p=Date.now()-a,$("#ai_explanation_titlebar").attr("disabled","true"),$("#view_sources_titlebar").attr("disabled","true");for(let e=0;e<10;e++)$(`#source_${e}_titlebar`).attr("disabled","true");$("#button_next").show(),$("#button_next").removeAttr("disabled"),s>=19&&($("#button_quit").show(),$("#button_quit").removeAttr("disabled")),e?(n=!0,$("#button_user_decision_claimtrue").attr("activedecision","true"),$("#button_user_decision_claimfalse").attr("activedecision","false")):(n=!1,$("#button_user_decision_claimfalse").attr("activedecision","true"),$("#button_user_decision_claimtrue").attr("activedecision","false"))}}function x(e){v+=e,0==v?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),v>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==v&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),f()),$("#main_box_instructions").children(":not(input)").each(((e,t)=>{$(t).hide()})),$(`#instructions_${v}`).show()}function f(){$("#button_user_decision_claimtrue").removeAttr("activedecision"),$("#button_user_decision_claimfalse").removeAttr("activedecision"),$("#button_user_decision_claimtrue").removeAttr("disabled"),$("#button_user_decision_claimfalse").removeAttr("disabled"),$("#ai_explanation_dropbtn").removeAttr("disabled"),$("#ai_explanation_dropbtn").removeAttr("activedecision"),$("#ai_explanation_dropbtn").attr("class","arrow right"),$("#ai_explanation_titlebar").removeAttr("disabled"),$("#ai_explanation_titlebar").removeAttr("activedecision"),$("#ai_explanation_dropdown").hide(),$("#view_sources_dropbtn").removeAttr("disabled"),$("#view_sources_dropbtn").removeAttr("activedecision"),$("#view_sources_dropbtn").attr("class","arrow right"),$("#view_sources_titlebar").removeAttr("disabled"),$("#view_sources_titlebar").removeAttr("activedecision"),$("#all_sources_div").hide();for(let e=0;e<10;e++)$(`#source_${e}_span`).hide(),$(`#source_${e}_dropbtn`).removeAttr("disabled"),$(`#source_${e}_dropbtn`).removeAttr("activedecision"),$(`#source_${e}_dropbtn`).attr("class","arrow right"),$(`#source_${e}_titlebar`).removeAttr("disabled"),$(`#source_${e}_titlebar`).removeAttr("activedecision");if(c=!1,l=!1,d=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],u=-1,b=-1,m=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],p=-1,$("#button_next").hide(),$("#button_quit").hide(),s+=1,s>=o.length)return $("#main_box_experiment").hide(),void(i?($("#reward_box_mock").text(`Your total reward is $${_.toFixed(2)} (${s+1} questions answered).`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${_.toFixed(2)} (${s+1} questions answered).`),$("#reward_box").show(),$("#main_box_end").show()));r=o[s],$("#claim_span").html(r.claim);let e=r.llm_prediction?'<span style="color:#347e32">the claim is true</span>':'<span style="color:#e63232">the claim is false</span>';$("#ai_prediction_span").html(e),$("#ai_confidence_span").html(r.llm_confidence),$("#ai_explanation_span").html(r.llm_explanation);for(let e=0;e<r.sources.length;e++)$(`#source_${e}_span`).html(r.sources[e]);a=Date.now(),$("#progress").text(`Progress: ${s+1} / ${o.length}`)}document.getElementById("ai_explanation_titlebar")?.addEventListener("click",(function(){if(-1!=p)return;const e=document.getElementById("ai_explanation_dropdown");e&&(e.style.display="block");const t=document.getElementById("ai_explanation_dropbtn");t&&(t.className="arrow vanish"),c=!0,u=Date.now()-a,$("#ai_explanation_titlebar").attr("disabled","true"),$("#ai_explanation_titlebar").attr("activedecision","true")})),document.getElementById("view_sources_titlebar")?.addEventListener("click",(function(){if(-1!=p)return;const e=document.getElementById("all_sources_div");e&&(e.style.display="block"==e.style.display?"none":"block");const t=document.getElementById("view_sources_dropbtn");t&&(t.className="arrow right"==t.className?"arrow down":"arrow right"),0==l&&(l=!0,b=Date.now()-a),"false"==$("#view_sources_titlebar").attr("activedecision")||null==$("#view_sources_titlebar").attr("activedecision")?$("#view_sources_titlebar").attr("activedecision","true"):$("#view_sources_titlebar").attr("activedecision","false")})),document.getElementById("source_0_titlebar")?.addEventListener("click",(()=>g(0))),document.getElementById("source_1_titlebar")?.addEventListener("click",(()=>g(1))),document.getElementById("source_2_titlebar")?.addEventListener("click",(()=>g(2))),document.getElementById("source_3_titlebar")?.addEventListener("click",(()=>g(3))),document.getElementById("source_4_titlebar")?.addEventListener("click",(()=>g(4))),document.getElementById("source_5_titlebar")?.addEventListener("click",(()=>g(5))),document.getElementById("source_6_titlebar")?.addEventListener("click",(()=>g(6))),document.getElementById("source_7_titlebar")?.addEventListener("click",(()=>g(7))),document.getElementById("source_8_titlebar")?.addEventListener("click",(()=>g(8))),document.getElementById("source_9_titlebar")?.addEventListener("click",(()=>g(9))),$("#button_user_decision_claimtrue").on("click",(()=>h(!0))),$("#button_user_decision_claimfalse").on("click",(()=>h(!1))),$("#button_instructions_next").on("click",(()=>x(1))),$("#button_instructions_prev").on("click",(()=>x(-1))),$("#button_next").on("click",(()=>{let e=r.gt_label==n;if(e&&(_+=.1),-1!=s){let i={question_i:s,user_balance_post_interaction:_,final_user_decision:n,user_is_correct:e,accessed_explanation:c,accessed_sources:l,accessed_individual_source:d};i.times={access_explanation:u,access_sources:b,access_individual_source:m,final_decision:p},i.question=r,i.count_exited_page=w,t(i),w=0}f()})),$("#button_quit").on("click",(()=>{if(r.gt_label==n&&(_+=.1),-1!=s){let e={question_i:s,user_balance_post_interaction:_,final_user_decision:n,accessed_explanation:c,accessed_sources:l,accessed_individual_source:d};e.times={access_explanation:u,access_sources:b,access_individual_source:m,final_decision:p},e.question=r,e.count_exited_page=w,t(e),w=0}$("#main_box_experiment").hide(),i?($("#reward_box_mock").text(`Your total reward is $${_.toFixed(2)} (${s+1} questions answered).`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${_.toFixed(2)} (${s+1} questions answered).`),$("#reward_box").show(),$("#main_box_end").show())}));const y=new URLSearchParams(window.location.search),E=y.get("start"),k=y.get("uid");if(globalThis.url_data=function(e){const t={};for(const[i,o]of e)t[i]=o;return t}(y.entries()),null!=k){if(globalThis.uid=k,"prolific_random"==globalThis.uid){let e=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${y.get("prolific_queue_name")}_${e}`}}else{let e=null;for(;null==e;)e=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=e}globalThis.url_data.session_id.startsWith("demo")&&(i=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((e=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((e=>{o=e,null!=E&&(s=parseInt(E)-1,console.log("Starting from",s)),x(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let I=!1;document.onvisibilitychange=()=>{I||(w+=1,I=!0,I=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,