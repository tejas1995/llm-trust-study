(()=>{"use strict";var e={d:(t,i)=>{for(var o in i)e.o(i,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:i[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{o:()=>o});let t="https://tejassrinivasan.pythonanywhere.com/";async function i(e){if(o)console.log("logged (mock)",e);else{e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="trialrun_studies"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let i=await $.ajax(t+"log",{data:JSON.stringify({project:"llm-trust-study/"+e.url_data.study_id,uid:globalThis.uid+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((e=>setTimeout(e,2e3)))}(),i}catch(e){console.log(e)}}}var o=!1,n=[];let a,s,r=-1,c=null,l=!1,d=!1,_=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],u=0,b=-1,m=-1,p=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],v=-1,g=0,h=0;function w(e){if(-1!=v)return;const t=document.getElementById(`source_${e}_span`);t&&(t.style.display="block");const i=document.getElementById(`source_${e}_dropbtn`);i&&(i.className="arrow down"),_[e]=!0,p[e]=Date.now()-s,$(`#source_${e}_titlebar`).attr("disabled","true"),$(`#source_${e}_titlebar`).attr("activedecision","true")}function x(e){if(-1!=r){a=!!e,v=Date.now()-s,$("#ai_explanation_titlebar").attr("disabled","true"),$("#view_sources_titlebar").attr("disabled","true");for(let e=0;e<10;e++)$(`#source_${e}_titlebar`).attr("disabled","true");$("#button_next").show(),$("#button_next").removeAttr("disabled"),r>=0&&($("#button_quit").show(),$("#button_quit").removeAttr("disabled")),e?(a=!0,$("#button_user_decision_claimtrue").attr("activedecision","true"),$("#button_user_decision_claimfalse").attr("activedecision","false")):(a=!1,$("#button_user_decision_claimfalse").attr("activedecision","true"),$("#button_user_decision_claimtrue").attr("activedecision","false"))}}function f(e){g+=e,0==g?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),g>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==g&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),y()),$("#main_box_instructions").children(":not(input)").each(((e,t)=>{$(t).hide()})),$(`#instructions_${g}`).show()}function y(){$("#button_user_decision_claimtrue").removeAttr("activedecision"),$("#button_user_decision_claimfalse").removeAttr("activedecision"),$("#button_user_decision_claimtrue").removeAttr("disabled"),$("#button_user_decision_claimfalse").removeAttr("disabled"),$("#ai_explanation_dropbtn").removeAttr("disabled"),$("#ai_explanation_dropbtn").removeAttr("activedecision"),$("#ai_explanation_dropbtn").attr("class","arrow right"),$("#ai_explanation_titlebar").removeAttr("disabled"),$("#ai_explanation_titlebar").removeAttr("activedecision"),$("#ai_explanation_dropdown").hide(),$("#view_sources_dropbtn").removeAttr("disabled"),$("#view_sources_dropbtn").removeAttr("activedecision"),$("#view_sources_dropbtn").attr("class","arrow right"),$("#view_sources_titlebar").removeAttr("disabled"),$("#view_sources_titlebar").removeAttr("activedecision"),$("#all_sources_div").hide();for(let e=0;e<10;e++)$(`#source_${e}_span`).hide(),$(`#source_${e}_dropbtn`).removeAttr("disabled"),$(`#source_${e}_dropbtn`).removeAttr("activedecision"),$(`#source_${e}_dropbtn`).attr("class","arrow right"),$(`#source_${e}_titlebar`).removeAttr("disabled"),$(`#source_${e}_titlebar`).removeAttr("activedecision");if(l=!1,d=!1,_=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],b=-1,m=-1,p=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],v=-1,$("#button_next").hide(),$("#button_quit").hide(),r+=1,r>=n.length)return $("#main_box_experiment").hide(),void(o?($("#reward_box_mock").text(`Your total reward is $${u.toFixed(2)} (${r+1} questions answered).`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${u.toFixed(2)} (${r+1} questions answered).`),$("#reward_box").show(),$("#main_box_end").show()));c=n[r],$("#claim_span").html(c.claim);let e=c.llm_prediction?"The claim is true.":"The claim is false.";$("#ai_prediction_span").html(e),$("#ai_confidence_span").html(c.llm_confidence),$("#ai_explanation_span").html(c.llm_explanation);for(let e=0;e<c.sources.length;e++)$(`#source_${e}_span`).html(c.sources[e]);s=Date.now(),$("#progress").text(`Progress: ${r+1} / ${n.length}`)}document.getElementById("ai_explanation_titlebar")?.addEventListener("click",(function(){if(-1!=v)return;const e=document.getElementById("ai_explanation_dropdown");e&&(e.style.display="block");const t=document.getElementById("ai_explanation_dropbtn");t&&(t.className="arrow vanish"),l=!0,b=Date.now()-s,$("#ai_explanation_titlebar").attr("disabled","true"),$("#ai_explanation_titlebar").attr("activedecision","true")})),document.getElementById("view_sources_titlebar")?.addEventListener("click",(function(){if(-1!=v)return;const e=document.getElementById("all_sources_div");e&&(e.style.display="block");const t=document.getElementById("view_sources_dropbtn");t&&(t.className="arrow vanish"),d=!0,m=Date.now()-s,$("#view_sources_titlebar").attr("disabled","true"),$("#view_sources_titlebar").attr("activedecision","true")})),document.getElementById("source_0_titlebar")?.addEventListener("click",(()=>w(0))),document.getElementById("source_1_titlebar")?.addEventListener("click",(()=>w(1))),document.getElementById("source_2_titlebar")?.addEventListener("click",(()=>w(2))),document.getElementById("source_3_titlebar")?.addEventListener("click",(()=>w(3))),document.getElementById("source_4_titlebar")?.addEventListener("click",(()=>w(4))),document.getElementById("source_5_titlebar")?.addEventListener("click",(()=>w(5))),document.getElementById("source_6_titlebar")?.addEventListener("click",(()=>w(6))),document.getElementById("source_7_titlebar")?.addEventListener("click",(()=>w(7))),document.getElementById("source_8_titlebar")?.addEventListener("click",(()=>w(8))),document.getElementById("source_9_titlebar")?.addEventListener("click",(()=>w(9))),$("#button_user_decision_claimtrue").on("click",(()=>x(!0))),$("#button_user_decision_claimfalse").on("click",(()=>x(!1))),$("#button_instructions_next").on("click",(()=>f(1))),$("#button_instructions_prev").on("click",(()=>f(-1))),$("#button_next").on("click",(()=>{if(c.gt_label==a&&(u+=.1),-1!=r){let e={question_i:r,user_balance_post_interaction:u,final_user_decision:a,accessed_explanation:l,accessed_sources:d,accessed_individual_source:_};e.times={access_explanation:b,access_sources:m,access_individual_source:p,final_decision:v},e.question=c,e.count_exited_page=h,i(e),h=0}y()})),$("#button_quit").on("click",(()=>{if(c.gt_label==a&&(u+=.1),-1!=r){let e={question_i:r,user_balance_post_interaction:u,final_user_decision:a,accessed_explanation:l,accessed_sources:d,accessed_individual_source:_};e.times={access_explanation:b,access_sources:m,access_individual_source:p,final_decision:v},e.question=c,e.count_exited_page=h,i(e),h=0}$("#main_box_experiment").hide(),o?($("#reward_box_mock").text(`Your total reward is $${u.toFixed(2)} (${r+1} questions answered).`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${u.toFixed(2)} (${r+1} questions answered).`),$("#reward_box").show(),$("#main_box_end").show())}));const E=new URLSearchParams(window.location.search),k=E.get("start"),I=E.get("uid");if(globalThis.url_data=function(e){const t={};for(const[i,o]of e)t[i]=o;return t}(E.entries()),null!=I){if(globalThis.uid=I,"prolific_random"==globalThis.uid){let e=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${E.get("prolific_queue_name")}_${e}`}}else{let e=null;for(;null==e;)e=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=e}globalThis.url_data.session_id.startsWith("demo")&&(o=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((e=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((e=>{n=e,null!=k&&(r=parseInt(k)-1,console.log("Starting from",r)),f(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let A=!1;document.onvisibilitychange=()=>{A||(h+=1,A=!0,A=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUVoQixPQUFPdEUsQ0FDVCxDRHNZc0J1RSxDQUFlVCxFQUFVTyxXQUU3QixNQUFkRCxHQUVBLEdBREF2RSxXQUFXRSxJQUFNcUUsRUFDSyxtQkFBbEJ2RSxXQUFXRSxJQUEwQixDQUNyQyxJQUFJeUUsRUFBVyxHQUFHQyxLQUFLQyxNQUFzQixHQUFoQkQsS0FBS0UsWUFBaUJDLFNBQVMsRUFBRyxLQUMvRC9FLFdBQVdFLElBQU0sR0FBRytELEVBQVU5RSxJQUFJLDBCQUEwQndGLEcsTUFJN0QsQ0FDSCxJQUFJSyxFQUFpQixLQUNyQixLQUFvQixNQUFiQSxHQUNIQSxFQUFZQyxPQUFPLHNIQUV2QmpGLFdBQVdFLElBQU04RSxDLENBTVZoRixXQUFXQyxTQUFxQixXQUFFaUYsV0FBVyxVQUNwRHJGLEdBQVcsR0FHZkMsUUFBUUMsSUFBSSxtQkFBb0JDLFdBQVdFLEtEN1pwQ1IsaUJBS0gsYUFIbUJVLEVBQUUrRSxRQUNqQixnQkFBZ0JuRixXQUFXRSxjQUFjc0MsS0FBS0MsUUFHdEQsQ0N3WkEyQyxHQUFZQyxPQUFPQyxJQUVmeEYsUUFBUUMsSUFBSSxvQkFDWkQsUUFBUUMsSUFBSUMsV0FBV0UsS0FDdkJpRSxPQUFPQyxTQUFTbUIsUUFBUSxJQUUxQkMsTUFBTUMsSUFDSjdGLEVBQU82RixFQUNjLE1BQWpCbkIsSUFDQW5ELEVBQWF1RSxTQUFTcEIsR0FBaUIsRUFDdkN4RSxRQUFRQyxJQUFJLGdCQUFpQm9CLElBR2pDNEIsRUFBa0IsR0FDbEIzQyxFQUFFLDBCQUEwQnlDLE9BQzVCekMsRUFBRSxpQ0FBaUM4QyxNQUFNLElBRzdDcEQsUUFBUUMsSUFBSSw2QkFBOEJDLFdBQVdFLEtBRXJELElBQUl5RixHQUFlLEVBQ25CekQsU0FBUzBELG1CQUFxQixLQUNyQkQsSUFDRDdELEdBQXFCLEVBQ3JCNkQsR0FBZSxFQUlmQSxHQUFlLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29ubmVjdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImltcG9ydCB7IERFVk1PREUgfSBmcm9tICcuL2dsb2JhbHMnXG5pbXBvcnQgeyBNT0NLTU9ERSB9IGZyb20gJy4vbWFpbidcblxubGV0IFNFUlZFUl9MT0dfUk9PVCA9IERFVk1PREUgPyBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMC9cIiA6IFwiaHR0cHM6Ly90ZWphc3NyaW5pdmFzYW4ucHl0aG9uYW55d2hlcmUuY29tL1wiXG5cbmFzeW5jIGZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRfZGF0YSgpOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIGluY2x1ZGUgdGltZXN0YW1wIHNvIHRoYXQgdGhpbmdzIGRvbid0IGdldCBjYWNoZWRcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgJC5nZXRKU09OKFxuICAgICAgICBgYmFrZWRfcXVldWVzLyR7Z2xvYmFsVGhpcy51aWR9Lmpzb24/dD0ke0RhdGUubm93KCl9YCxcbiAgICApXG4gICAgcmV0dXJuIHJlc3VsdFxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvZ19kYXRhKGRhdGEpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmIChNT0NLTU9ERSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImxvZ2dlZCAobW9jaylcIiwgZGF0YSlcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIFxuICAgIGRhdGFbXCJ1cmxfZGF0YVwiXSA9IGdsb2JhbFRoaXMudXJsX2RhdGFcbiAgICBjb25zb2xlLmxvZyhcIkRhdGFcIilcbiAgICBpZiAoIShcInN0dWR5X2lkXCIgaW4gZGF0YVsndXJsX2RhdGEnXSkpIHtcbiAgICAgICAgZGF0YVsndXJsX2RhdGEnXVtcInN0dWR5X2lkXCJdID0gXCJ0cmlhbHJ1bl9zdHVkaWVzXCJcbiAgICB9XG4gICAgZGF0YVtcInVybF9kYXRhXCJdW1wicXVldWVfaWRcIl0gPSBnbG9iYWxUaGlzLnVpZFxuICAgIGNvbnNvbGUubG9nKFwibG9nZ2VkXCIsIGRhdGEpXG4gICAgY29uc29sZS5sb2coXCJMb2dnaW5nIHRvXCIsIFNFUlZFUl9MT0dfUk9PVCArIFwibG9nXCIpXG5cbiAgICB0cnkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgJC5hamF4KFxuICAgICAgICAgICAgU0VSVkVSX0xPR19ST09UICsgXCJsb2dcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IFwibGxtLXRydXN0LXN0dWR5L1wiK2RhdGFbJ3VybF9kYXRhJ11bJ3N0dWR5X2lkJ10sXG4gICAgICAgICAgICAgICAgICAgIHVpZDogZ2xvYmFsVGhpcy51aWQrXCJfXCIrZGF0YVsndXJsX2RhdGEnXVsncHJvbGlmaWNfaWQnXSxcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgYXdhaXQgc2xlZXAoMjAwMCk7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgfVxufSIsImltcG9ydCB7IERFVk1PREUgfSBmcm9tIFwiLi9nbG9iYWxzXCJcbmV4cG9ydCB2YXIgVUlEOiBzdHJpbmdcbmV4cG9ydCB2YXIgTU9DS01PREU6IGJvb2xlYW4gPSBmYWxzZVxuaW1wb3J0IHsgbG9hZF9kYXRhLCBsb2dfZGF0YSB9IGZyb20gJy4vY29ubmVjdG9yJ1xuaW1wb3J0IHsgcGFyYW1zVG9PYmplY3QgfSBmcm9tIFwiLi91dGlsc1wiXG5cbnZhciBkYXRhOiBhbnlbXSA9IFtdXG5sZXQgcXVlc3Rpb25faSA9IC0xXG5sZXQgcXVlc3Rpb246IGFueSA9IG51bGxcbmxldCBmaW5hbF91c2VyX2RlY2lzaW9uOiBib29sZWFuXG5sZXQgYWNjZXNzZWRfZXhwbGFuYXRpb246IGJvb2xlYW4gPSBmYWxzZVxubGV0IGFjY2Vzc2VkX3NvdXJjZXM6IGJvb2xlYW4gPSBmYWxzZVxubGV0IGFjY2Vzc2VkX2luZGl2aWR1YWxfc291cmNlOiBhbnlbXSA9IFtmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV1cbmxldCBiYWxhbmNlID0gMFxubGV0IHRpbWVfcXVlc3Rpb25fc3RhcnQ6IG51bWJlclxubGV0IHRpbWVfdG9fYWNjZXNzX2V4cGxhbmF0aW9uOiBudW1iZXIgPSAtMVxubGV0IHRpbWVfdG9fYWNjZXNzX3NvdXJjZXM6IG51bWJlciA9IC0xXG5sZXQgdGltZV90b19hY2Nlc3NfaW5kaXZpZHVhbF9zb3VyY2U6IGFueVtdID0gWy0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xXVxubGV0IHRpbWVfZmluYWxfZGVjaXNpb246IG51bWJlciA9IC0xXG5sZXQgaW5zdHJ1Y3Rpb25faTogbnVtYmVyID0gMFxubGV0IGNvdW50X2V4aXRlZF9wYWdlOiBudW1iZXIgPSAwXG5cbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICB0aHJvdyBtZXNzYWdlIHx8IFwiQXNzZXJ0aW9uIGZhaWxlZFwiO1xuICAgIH1cbn1cblxuLy8gRnVuY3Rpb24gdG8gdG9nZ2xlIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBkaXYgZWxlbWVudFxuZnVuY3Rpb24gc2hvd0V4cGxhbmF0aW9uKCkge1xuICAgIGlmICh0aW1lX2ZpbmFsX2RlY2lzaW9uICE9IC0xKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIEdldCB0aGUgZGl2IGVsZW1lbnQgYnkgaXRzIElEXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FpX2V4cGxhbmF0aW9uX2Ryb3Bkb3duJyk7XG4gICAgaWYgKGRpdikge1xuICAgICAgICAvLyBUb2dnbGUgdGhlIHZpc2liaWxpdHlcbiAgICAgICAgZGl2LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cbiAgICBjb25zdCBidXR0b25fZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FpX2V4cGxhbmF0aW9uX2Ryb3BidG4nKTtcbiAgICBpZiAoYnV0dG9uX2Rpdikge1xuICAgICAgICAvL0NoYW5nZSB0aGUgY2xhc3MgdG8gYXJyb3cgZG93blxuICAgICAgICBidXR0b25fZGl2LmNsYXNzTmFtZSA9ICdhcnJvdyB2YW5pc2gnO1xuICAgIH1cbiAgICBhY2Nlc3NlZF9leHBsYW5hdGlvbiA9IHRydWVcbiAgICB0aW1lX3RvX2FjY2Vzc19leHBsYW5hdGlvbiA9IERhdGUubm93KCkgLSB0aW1lX3F1ZXN0aW9uX3N0YXJ0XG5cbiAgICAvLyQoXCIjYWlfZXhwbGFuYXRpb25fZHJvcGRvd25cIikudG9nZ2xlKClcbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX3RpdGxlYmFyXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX3RpdGxlYmFyXCIpLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcbiAgfVxuICBcbi8vIEV2ZW50IGxpc3RlbmVyIGZvciB0aGUgYnV0dG9uIGNsaWNrXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWlfZXhwbGFuYXRpb25fdGl0bGViYXInKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaG93RXhwbGFuYXRpb24pO1xuXG5mdW5jdGlvbiBzaG93QWxsU291cmNlcygpIHtcbiAgICBpZiAodGltZV9maW5hbF9kZWNpc2lvbiAhPSAtMSkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIGRpdiBlbGVtZW50IGJ5IGl0cyBJRFxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbGxfc291cmNlc19kaXYnKTtcbiAgICBpZiAoZGl2KSB7XG4gICAgICAgIC8vIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eVxuICAgICAgICBkaXYuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuICAgIGNvbnN0IGJ1dHRvbl9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlld19zb3VyY2VzX2Ryb3BidG4nKTtcbiAgICBpZiAoYnV0dG9uX2Rpdikge1xuICAgICAgICAvL0NoYW5nZSB0aGUgY2xhc3MgdG8gYXJyb3cgdmFuaXNoXG4gICAgICAgIGJ1dHRvbl9kaXYuY2xhc3NOYW1lID0gJ2Fycm93IHZhbmlzaCc7XG4gICAgfVxuICAgIGFjY2Vzc2VkX3NvdXJjZXMgPSB0cnVlXG4gICAgdGltZV90b19hY2Nlc3Nfc291cmNlcyA9IERhdGUubm93KCkgLSB0aW1lX3F1ZXN0aW9uX3N0YXJ0XG5cbiAgICAvLyQoXCIjYWlfZXhwbGFuYXRpb25fZHJvcGRvd25cIikudG9nZ2xlKClcbiAgICAkKFwiI3ZpZXdfc291cmNlc190aXRsZWJhclwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgJChcIiN2aWV3X3NvdXJjZXNfdGl0bGViYXJcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxufVxuXG4vLyBFdmVudCBsaXN0ZW5lciBmb3IgdGhlIGJ1dHRvbiBjbGlja1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXdfc291cmNlc190aXRsZWJhcicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dBbGxTb3VyY2VzKTtcblxuZnVuY3Rpb24gc2hvd1NvdXJjZShzb3VyY2VfbnVtOiBudW1iZXIpIHtcbiAgICBpZiAodGltZV9maW5hbF9kZWNpc2lvbiAhPSAtMSkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgXG4gICAgLy8gR2V0IHRoZSBkaXYgZWxlbWVudCBieSBpdHMgSURcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgc291cmNlXyR7c291cmNlX251bX1fc3BhbmApO1xuICAgIGlmIChkaXYpIHtcbiAgICAgICAgLy8gVG9nZ2xlIHRoZSB2aXNpYmlsaXR5XG4gICAgICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG4gICAgY29uc3QgYnV0dG9uX2RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzb3VyY2VfJHtzb3VyY2VfbnVtfV9kcm9wYnRuYCk7XG4gICAgaWYgKGJ1dHRvbl9kaXYpIHtcbiAgICAgICAgLy9DaGFuZ2UgdGhlIGNsYXNzIHRvIGFycm93IGRvd25cbiAgICAgICAgYnV0dG9uX2Rpdi5jbGFzc05hbWUgPSAnYXJyb3cgZG93bic7XG4gICAgfVxuICAgIGFjY2Vzc2VkX2luZGl2aWR1YWxfc291cmNlW3NvdXJjZV9udW1dID0gdHJ1ZVxuICAgIHRpbWVfdG9fYWNjZXNzX2luZGl2aWR1YWxfc291cmNlW3NvdXJjZV9udW1dID0gRGF0ZS5ub3coKSAtIHRpbWVfcXVlc3Rpb25fc3RhcnRcbiAgICAvLyQoXCIjYWlfZXhwbGFuYXRpb25fZHJvcGRvd25cIikudG9nZ2xlKClcbiAgICAkKGAjc291cmNlXyR7c291cmNlX251bX1fdGl0bGViYXJgKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgJChgI3NvdXJjZV8ke3NvdXJjZV9udW19X3RpdGxlYmFyYCkuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxufVxuXG4vLyBFdmVudCBsaXN0ZW5lciBmb3IgdGhlIGJ1dHRvbiBjbGlja1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZV8wX3RpdGxlYmFyJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2hvd1NvdXJjZSgwKSk7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlXzFfdGl0bGViYXInKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzaG93U291cmNlKDEpKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VfMl90aXRsZWJhcicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHNob3dTb3VyY2UoMikpO1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZV8zX3RpdGxlYmFyJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2hvd1NvdXJjZSgzKSk7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlXzRfdGl0bGViYXInKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzaG93U291cmNlKDQpKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VfNV90aXRsZWJhcicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHNob3dTb3VyY2UoNSkpO1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZV82X3RpdGxlYmFyJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2hvd1NvdXJjZSg2KSk7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlXzdfdGl0bGViYXInKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzaG93U291cmNlKDcpKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VfOF90aXRsZWJhcicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHNob3dTb3VyY2UoOCkpO1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZV85X3RpdGxlYmFyJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2hvd1NvdXJjZSg5KSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZVVzZXJEZWNpc2lvbih1c2VyX2RlY2lzaW9uOiBib29sZWFuKSB7XG4gICAgaWYgKHF1ZXN0aW9uX2kgIT0gLTEpIHtcbiAgICAgICAgZmluYWxfdXNlcl9kZWNpc2lvbiA9IHVzZXJfZGVjaXNpb24gPyB0cnVlIDogZmFsc2VcblxuICAgICAgICB0aW1lX2ZpbmFsX2RlY2lzaW9uID0gRGF0ZS5ub3coKSAtIHRpbWVfcXVlc3Rpb25fc3RhcnRcblxuICAgICAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX3RpdGxlYmFyXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAgICAgJChcIiN2aWV3X3NvdXJjZXNfdGl0bGViYXJcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICAgICBmb3IgKGxldCBzb3VyY2VfbnVtID0gMDsgc291cmNlX251bSA8IDEwOyBzb3VyY2VfbnVtKyspIHtcbiAgICAgICAgICAgICQoYCNzb3VyY2VfJHtzb3VyY2VfbnVtfV90aXRsZWJhcmApLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAgICAgfVxuXG4gICAgICAgICQoXCIjYnV0dG9uX25leHRcIikuc2hvdygpXG4gICAgICAgICQoXCIjYnV0dG9uX25leHRcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgICAgIGlmIChxdWVzdGlvbl9pID49IDApIHtcbiAgICAgICAgICAgICQoJyNidXR0b25fcXVpdCcpLnNob3coKVxuICAgICAgICAgICAgJCgnI2J1dHRvbl9xdWl0JykucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgICAgIH1cbiAgICAgICAgLy8kKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltdHJ1ZVwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgICAgIC8vJChcIiNidXR0b25fdXNlcl9kZWNpc2lvbl9jbGFpbWZhbHNlXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAgICAgaWYgKHVzZXJfZGVjaXNpb24pIHtcbiAgICAgICAgICAgIGZpbmFsX3VzZXJfZGVjaXNpb24gPSB0cnVlXG4gICAgICAgICAgICAkKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltdHJ1ZVwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgICAgICAgICAkKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltZmFsc2VcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwiZmFsc2VcIilcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZpbmFsX3VzZXJfZGVjaXNpb24gPSBmYWxzZVxuICAgICAgICAgICAgJChcIiNidXR0b25fdXNlcl9kZWNpc2lvbl9jbGFpbWZhbHNlXCIpLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcbiAgICAgICAgICAgICQoXCIjYnV0dG9uX3VzZXJfZGVjaXNpb25fY2xhaW10cnVlXCIpLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcImZhbHNlXCIpXG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuJChcIiNidXR0b25fdXNlcl9kZWNpc2lvbl9jbGFpbXRydWVcIikub24oXCJjbGlja1wiLCAoKSA9PiB1cGRhdGVVc2VyRGVjaXNpb24odHJ1ZSkpXG4kKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltZmFsc2VcIikub24oXCJjbGlja1wiLCAoKSA9PiB1cGRhdGVVc2VyRGVjaXNpb24oZmFsc2UpKVxuXG5cbmZ1bmN0aW9uIG5leHRfaW5zdHJ1Y3Rpb25zKGluY3JlbWVudDogbnVtYmVyKSB7XG4gICAgaW5zdHJ1Y3Rpb25faSArPSBpbmNyZW1lbnRcblxuICAgIGlmIChpbnN0cnVjdGlvbl9pID09IDApIHtcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX3ByZXZcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgIH1cbiAgICBpZiAoaW5zdHJ1Y3Rpb25faSA+PSA2KSB7XG4gICAgICAgICQoXCIjaW5zdHJ1Y3Rpb25zX2FuZF9kZWNvcmF0aW9uc1wiKS5zaG93KClcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX25leHRcIikudmFsKFwiU3RhcnQgc3R1ZHlcIilcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuaGlkZSgpXG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLnZhbChcIk5leHRcIilcbiAgICB9XG4gICAgaWYgKGluc3RydWN0aW9uX2kgPT0gNykge1xuICAgICAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5oaWRlKClcbiAgICAgICAgJChcIiNtYWluX2JveF9leHBlcmltZW50XCIpLnNob3coKVxuICAgICAgICBuZXh0X3F1ZXN0aW9uKClcbiAgICB9XG5cbiAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5jaGlsZHJlbihcIjpub3QoaW5wdXQpXCIpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgICAgICQoZWwpLmhpZGUoKVxuICAgIH0pXG4gICAgJChgI2luc3RydWN0aW9uc18ke2luc3RydWN0aW9uX2l9YCkuc2hvdygpXG59XG4kKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS5vbihcImNsaWNrXCIsICgpID0+IG5leHRfaW5zdHJ1Y3Rpb25zKCsxKSlcbiQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbmV4dF9pbnN0cnVjdGlvbnMoLTEpKVxuXG4kKFwiI2J1dHRvbl9uZXh0XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4ge1xuXG4gICAgbGV0IGd0X2xhYmVsOiBib29sZWFuID0gcXVlc3Rpb24hW1wiZ3RfbGFiZWxcIl1cbiAgICBsZXQgdXNlcl9pc19jb3JyZWN0OiBib29sZWFuID0gZ3RfbGFiZWwgPT0gZmluYWxfdXNlcl9kZWNpc2lvblxuICAgIGlmICh1c2VyX2lzX2NvcnJlY3QpIHtcbiAgICAgICAgYmFsYW5jZSArPSAwLjFcbiAgICB9XG5cbiAgICBpZiAocXVlc3Rpb25faSAhPSAtMSkge1xuICAgICAgICBsZXQgbG9nZ2VkX2RhdGEgPSB7XG4gICAgICAgICAgICBcInF1ZXN0aW9uX2lcIjogcXVlc3Rpb25faSxcbiAgICAgICAgICAgIFwidXNlcl9iYWxhbmNlX3Bvc3RfaW50ZXJhY3Rpb25cIjogYmFsYW5jZSxcbiAgICAgICAgICAgIFwiZmluYWxfdXNlcl9kZWNpc2lvblwiOiBmaW5hbF91c2VyX2RlY2lzaW9uLFxuICAgICAgICAgICAgXCJhY2Nlc3NlZF9leHBsYW5hdGlvblwiOiBhY2Nlc3NlZF9leHBsYW5hdGlvbixcbiAgICAgICAgICAgIFwiYWNjZXNzZWRfc291cmNlc1wiOiBhY2Nlc3NlZF9zb3VyY2VzLFxuICAgICAgICAgICAgXCJhY2Nlc3NlZF9pbmRpdmlkdWFsX3NvdXJjZVwiOiBhY2Nlc3NlZF9pbmRpdmlkdWFsX3NvdXJjZSxcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ2dlZF9kYXRhWyd0aW1lcyddID0ge1xuICAgICAgICAgICAgXCJhY2Nlc3NfZXhwbGFuYXRpb25cIjogdGltZV90b19hY2Nlc3NfZXhwbGFuYXRpb24sXG4gICAgICAgICAgICBcImFjY2Vzc19zb3VyY2VzXCI6IHRpbWVfdG9fYWNjZXNzX3NvdXJjZXMsXG4gICAgICAgICAgICBcImFjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZVwiOiB0aW1lX3RvX2FjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZSxcbiAgICAgICAgICAgIFwiZmluYWxfZGVjaXNpb25cIjogdGltZV9maW5hbF9kZWNpc2lvbixcbiAgICAgICAgfVxuICAgICAgICBsb2dnZWRfZGF0YVsncXVlc3Rpb24nXSA9IHF1ZXN0aW9uXG4gICAgICAgIGxvZ2dlZF9kYXRhWydjb3VudF9leGl0ZWRfcGFnZSddID0gY291bnRfZXhpdGVkX3BhZ2VcbiAgICAgICAgbG9nX2RhdGEobG9nZ2VkX2RhdGEpXG4gICAgICAgIGNvdW50X2V4aXRlZF9wYWdlID0gMFxuICAgIH1cbiAgICBcblxuICAgIG5leHRfcXVlc3Rpb24oKVxufSk7XG5cbiQoXCIjYnV0dG9uX3F1aXRcIikub24oXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgbGV0IGd0X2xhYmVsOiBib29sZWFuID0gcXVlc3Rpb24hW1wiZ3RfbGFiZWxcIl1cbiAgICBsZXQgdXNlcl9pc19jb3JyZWN0OiBib29sZWFuID0gZ3RfbGFiZWwgPT0gZmluYWxfdXNlcl9kZWNpc2lvblxuICAgIGlmICh1c2VyX2lzX2NvcnJlY3QpIHtcbiAgICAgICAgYmFsYW5jZSArPSAwLjFcbiAgICB9XG5cbiAgICBpZiAocXVlc3Rpb25faSAhPSAtMSkge1xuICAgICAgICBsZXQgbG9nZ2VkX2RhdGEgPSB7XG4gICAgICAgICAgICBcInF1ZXN0aW9uX2lcIjogcXVlc3Rpb25faSxcbiAgICAgICAgICAgIFwidXNlcl9iYWxhbmNlX3Bvc3RfaW50ZXJhY3Rpb25cIjogYmFsYW5jZSxcbiAgICAgICAgICAgIFwiZmluYWxfdXNlcl9kZWNpc2lvblwiOiBmaW5hbF91c2VyX2RlY2lzaW9uLFxuICAgICAgICAgICAgXCJhY2Nlc3NlZF9leHBsYW5hdGlvblwiOiBhY2Nlc3NlZF9leHBsYW5hdGlvbixcbiAgICAgICAgICAgIFwiYWNjZXNzZWRfc291cmNlc1wiOiBhY2Nlc3NlZF9zb3VyY2VzLFxuICAgICAgICAgICAgXCJhY2Nlc3NlZF9pbmRpdmlkdWFsX3NvdXJjZVwiOiBhY2Nlc3NlZF9pbmRpdmlkdWFsX3NvdXJjZSxcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ2dlZF9kYXRhWyd0aW1lcyddID0ge1xuICAgICAgICAgICAgXCJhY2Nlc3NfZXhwbGFuYXRpb25cIjogdGltZV90b19hY2Nlc3NfZXhwbGFuYXRpb24sXG4gICAgICAgICAgICBcImFjY2Vzc19zb3VyY2VzXCI6IHRpbWVfdG9fYWNjZXNzX3NvdXJjZXMsXG4gICAgICAgICAgICBcImFjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZVwiOiB0aW1lX3RvX2FjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZSxcbiAgICAgICAgICAgIFwiZmluYWxfZGVjaXNpb25cIjogdGltZV9maW5hbF9kZWNpc2lvbixcbiAgICAgICAgfVxuICAgICAgICBsb2dnZWRfZGF0YVsncXVlc3Rpb24nXSA9IHF1ZXN0aW9uXG4gICAgICAgIGxvZ2dlZF9kYXRhWydjb3VudF9leGl0ZWRfcGFnZSddID0gY291bnRfZXhpdGVkX3BhZ2VcbiAgICAgICAgbG9nX2RhdGEobG9nZ2VkX2RhdGEpXG4gICAgICAgIGNvdW50X2V4aXRlZF9wYWdlID0gMFxuICAgIH1cblxuICAgICQoXCIjbWFpbl9ib3hfZXhwZXJpbWVudFwiKS5oaWRlKClcbiAgICBpZiAoTU9DS01PREUpIHtcbiAgICAgICAgJCgnI3Jld2FyZF9ib3hfbW9jaycpLnRleHQoYFlvdXIgdG90YWwgcmV3YXJkIGlzICQke2JhbGFuY2UudG9GaXhlZCgyKX0gKCR7cXVlc3Rpb25faSsxfSBxdWVzdGlvbnMgYW5zd2VyZWQpLmApXG4gICAgICAgICQoJyNyZXdhcmRfYm94X21vY2snKS5zaG93KClcbiAgICAgICAgJChcIiNtYWluX2JveF9lbmRfbW9ja1wiKS5zaG93KClcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKCcjcmV3YXJkX2JveCcpLnRleHQoYFlvdXIgdG90YWwgcmV3YXJkIGlzICQke2JhbGFuY2UudG9GaXhlZCgyKX0gKCR7cXVlc3Rpb25faSsxfSBxdWVzdGlvbnMgYW5zd2VyZWQpLmApXG4gICAgICAgICQoJyNyZXdhcmRfYm94Jykuc2hvdygpXG4gICAgICAgICQoXCIjbWFpbl9ib3hfZW5kXCIpLnNob3coKVxuICAgIH1cbiAgICByZXR1cm5cbn0pXG5cblxuXG5mdW5jdGlvbiBzaG93X3Jlc3VsdCgpIHtcblxuXG4gICAgLy9sZXQgYWlfaXNfY29ycmVjdDogYm9vbGVhbiA9IHF1ZXN0aW9uIVtcImxsbV9pc19jb3JyZWN0XCJdXG4gICAgLy9sZXQgbWVzc2FnZSA9IFwiQ29ycmVjdCBhbnN3ZXI6IDxiPk9wdGlvbiBcIiArIGNvcnJlY3Rfb3B0aW9uICsgXCI8L2I+Ljxicj5cIlxuICAgIC8vaWYgKHVzZXJfaXNfY29ycmVjdCkge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gXCJZb3UgcGlja2VkIE9wdGlvbiBcIiArIGZpbmFsX3VzZXJfZGVjaXNpb24gKyBcIiwgd2hpY2ggd2FzIDxzcGFuIGNsYXNzPSdjb2xvcl9jb3JyZWN0Jz48Yj5jb3JyZWN0PC9iPjwvc3Bhbj4uPGJyPlwiXG4gICAgLy99XG4gICAgLy9lbHNlIHtcbiAgICAvLyAgICBtZXNzYWdlICs9IFwiWW91IHBpY2tlZCBPcHRpb24gXCIgKyBmaW5hbF91c2VyX2RlY2lzaW9uICsgXCIsIHdoaWNoIHdhcyA8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5pbmNvcnJlY3Q8L2I+PC9zcGFuPi48YnI+XCJcbiAgICAvL31cbiAgICAvL2lmIChhaV9pc19jb3JyZWN0KSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBcIlRoZSBBSSBwaWNrZWQgT3B0aW9uIFwiICsgcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSArIFwiLCB3aGljaCB3YXMgPHNwYW4gY2xhc3M9J2NvbG9yX2NvcnJlY3QnPjxiPmNvcnJlY3Q8Yj48L3NwYW4+Ljxicj5cIlxuICAgIC8vfVxuICAgIC8vZWxzZSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBcIlRoZSBBSSBwaWNrZWQgT3B0aW9uIFwiICsgcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSArIFwiLCB3aGljaCB3YXMgPHNwYW4gY2xhc3M9J2NvbG9yX2luY29ycmVjdCc+PGI+aW5jb3JyZWN0PC9iPjwvc3Bhbj4uPGJyPlwiXG4gICAgLy99XG4gICAgLy9pZiAodXNlcl9pc19jb3JyZWN0KSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBcIjxzcGFuIGNsYXNzPSdjb2xvcl9jb3JyZWN0Jz48Yj5Zb3UgcmVjZWl2ZSBhIHJld2FyZCBvZiAkMC4xMC48L2I+PC9zcGFuPlwiXG4gICAgLy8gICAgYmFsYW5jZSArPSAwLjFcbiAgICAvL31cbiAgICAvL2Vsc2Uge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gXCI8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5Zb3UgZG8gbm90IHJlY2VpdmUgYW55IHJld2FyZC48L2I+PC9zcGFuPlwiXG4gICAgLy99XG4gICAgLy9tZXNzYWdlICs9IFwiPGJyPlwiXG4gICAgLy9pZiAoc3VjY2Vzcykge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gYFlvdSBnYWluICQkeyhiZXRfdmFsKmJldF92YWxfcmF0aW8pLnRvRml4ZWQoMil9LmBcbiAgICAvLyAgICBiYWxhbmNlICs9IGJldF92YWwqYmV0X3ZhbF9yYXRpb1xuICAgIC8vfSBlbHNlIHtcbiAgICAvLyAgICBtZXNzYWdlICs9IGBZb3UgbG9zZSAkJHsoYmV0X3ZhbC8xLjApLnRvRml4ZWQoMil9LmBcbiAgICAvLyAgICBiYWxhbmNlIC09IGJldF92YWwvMS4wXG4gICAgLy8gICAgYmFsYW5jZSA9IE1hdGgubWF4KDAsIGJhbGFuY2UpXG4gICAgLy99XG4gICAgLy8kKFwiI2JhbGFuY2VcIikudGV4dChgQmFsYW5jZTogJCR7YmFsYW5jZS50b0ZpeGVkKDIpfSArICQxLjBgKVxuICAgIC8vJChcIiNyZXN1bHRfc3BhblwiKS5odG1sKG1lc3NhZ2UpXG4gICAgLy8vLyQoXCIjYnV0dG9uX25leHRcIikuc2hvdygpXG4gICAgLy8kKFwiI3Jlc3VsdF9zcGFuXCIpLnNob3coKVxuICAgIC8vJChcIiNidXR0b25fcGxhY2VfYmV0XCIpLmhpZGUoKVxuXG4gICAgLy8kKCcjcmFuZ2VfdmFsJykuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxufVxuXG4vLyQoXCIjYnV0dG9uX3BsYWNlX2JldFwiKS5vbihcImNsaWNrXCIsIHNob3dfcmVzdWx0KVxuXG5mdW5jdGlvbiBuZXh0X3F1ZXN0aW9uKCkge1xuICAgIC8vIHJlc3RvcmUgcHJldmlvdXMgc3RhdGUgb2YgVUlcblxuICAgICQoXCIjYnV0dG9uX3VzZXJfZGVjaXNpb25fY2xhaW10cnVlXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYnV0dG9uX3VzZXJfZGVjaXNpb25fY2xhaW1mYWxzZVwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltdHJ1ZVwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltZmFsc2VcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG5cbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX2Ryb3BidG5cIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNhaV9leHBsYW5hdGlvbl9kcm9wYnRuXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fZHJvcGJ0blwiKS5hdHRyKFwiY2xhc3NcIiwgXCJhcnJvdyByaWdodFwiKVxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fdGl0bGViYXJcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNhaV9leHBsYW5hdGlvbl90aXRsZWJhclwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX2Ryb3Bkb3duXCIpLmhpZGUoKVxuXG4gICAgJChcIiN2aWV3X3NvdXJjZXNfZHJvcGJ0blwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI3ZpZXdfc291cmNlc19kcm9wYnRuXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjdmlld19zb3VyY2VzX2Ryb3BidG5cIikuYXR0cihcImNsYXNzXCIsIFwiYXJyb3cgcmlnaHRcIilcbiAgICAkKFwiI3ZpZXdfc291cmNlc190aXRsZWJhclwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI3ZpZXdfc291cmNlc190aXRsZWJhclwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2FsbF9zb3VyY2VzX2RpdlwiKS5oaWRlKClcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAkKGAjc291cmNlXyR7aX1fc3BhbmApLmhpZGUoKVxuICAgICAgICAkKGAjc291cmNlXyR7aX1fZHJvcGJ0bmApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICAgICAkKGAjc291cmNlXyR7aX1fZHJvcGJ0bmApLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICAgICAkKGAjc291cmNlXyR7aX1fZHJvcGJ0bmApLmF0dHIoXCJjbGFzc1wiLCBcImFycm93IHJpZ2h0XCIpXG4gICAgICAgICQoYCNzb3VyY2VfJHtpfV90aXRsZWJhcmApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICAgICAkKGAjc291cmNlXyR7aX1fdGl0bGViYXJgKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICB9XG5cbiAgICBhY2Nlc3NlZF9leHBsYW5hdGlvbiA9IGZhbHNlXG4gICAgYWNjZXNzZWRfc291cmNlcyA9IGZhbHNlXG4gICAgYWNjZXNzZWRfaW5kaXZpZHVhbF9zb3VyY2UgPSBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdXG5cbiAgICB0aW1lX3RvX2FjY2Vzc19leHBsYW5hdGlvbiA9IC0xXG4gICAgdGltZV90b19hY2Nlc3Nfc291cmNlcyA9IC0xXG4gICAgdGltZV90b19hY2Nlc3NfaW5kaXZpZHVhbF9zb3VyY2UgPSBbLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTFdXG4gICAgdGltZV9maW5hbF9kZWNpc2lvbiA9IC0xXG4gICAgXG5cbiAgICAkKFwiI2J1dHRvbl9uZXh0XCIpLmhpZGUoKVxuICAgICQoJyNidXR0b25fcXVpdCcpLmhpZGUoKVxuICAgIC8vJChcIiNyYW5nZV92YWxcIikudmFsKHVzZXJfdHJ1c3QpXG5cbiAgICBxdWVzdGlvbl9pICs9IDFcbiAgICBpZiAocXVlc3Rpb25faSA+PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICAkKFwiI21haW5fYm94X2V4cGVyaW1lbnRcIikuaGlkZSgpXG4gICAgICAgIGlmIChNT0NLTU9ERSkge1xuICAgICAgICAgICAgJCgnI3Jld2FyZF9ib3hfbW9jaycpLnRleHQoYFlvdXIgdG90YWwgcmV3YXJkIGlzICQke2JhbGFuY2UudG9GaXhlZCgyKX0gKCR7cXVlc3Rpb25faSsxfSBxdWVzdGlvbnMgYW5zd2VyZWQpLmApXG4gICAgICAgICAgICAkKCcjcmV3YXJkX2JveF9tb2NrJykuc2hvdygpXG4gICAgICAgICAgICAkKFwiI21haW5fYm94X2VuZF9tb2NrXCIpLnNob3coKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCgnI3Jld2FyZF9ib3gnKS50ZXh0KGBZb3VyIHRvdGFsIHJld2FyZCBpcyAkJHtiYWxhbmNlLnRvRml4ZWQoMil9ICgke3F1ZXN0aW9uX2krMX0gcXVlc3Rpb25zIGFuc3dlcmVkKS5gKVxuICAgICAgICAgICAgJCgnI3Jld2FyZF9ib3gnKS5zaG93KClcbiAgICAgICAgICAgICQoXCIjbWFpbl9ib3hfZW5kXCIpLnNob3coKVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBxdWVzdGlvbiA9IGRhdGFbcXVlc3Rpb25faV1cblxuICAgICQoXCIjY2xhaW1fc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcImNsYWltXCJdKVxuICAgIGxldCBhaV9wcmVkaWN0aW9uID0gcXVlc3Rpb24hW1wibGxtX3ByZWRpY3Rpb25cIl0gPyBcIlRoZSBjbGFpbSBpcyB0cnVlLlwiIDogXCJUaGUgY2xhaW0gaXMgZmFsc2UuXCJcbiAgICAkKFwiI2FpX3ByZWRpY3Rpb25fc3BhblwiKS5odG1sKGFpX3ByZWRpY3Rpb24pXG4gICAgJChcIiNhaV9jb25maWRlbmNlX3NwYW5cIikuaHRtbChxdWVzdGlvbiFbXCJsbG1fY29uZmlkZW5jZVwiXSlcblxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcImxsbV9leHBsYW5hdGlvblwiXSlcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXN0aW9uIVtcInNvdXJjZXNcIl0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgJChgI3NvdXJjZV8ke2l9X3NwYW5gKS5odG1sKHF1ZXN0aW9uIVtcInNvdXJjZXNcIl1baV0pXG4gICAgfVxuXG4gICAgLy8gc2V0IGJldCB2YWx1ZSByYXRpb1xuICAgIC8vaWYocXVlc3Rpb24uaGFzT3duUHJvcGVydHkoXCJyZXdhcmRfcmF0aW9cIikpIHtcbiAgICAvLyAgICBsZXQgW3JhdGlvMSwgcmF0aW8yXSA9IHF1ZXN0aW9uW1wicmV3YXJkX3JhdGlvXCJdXG4gICAgLy8gICAgcmF0aW8xID0gTnVtYmVyKHJhdGlvMSlcbiAgICAvLyAgICByYXRpbzIgPSBOdW1iZXIocmF0aW8yKVxuICAgIC8vICAgIGJldF92YWxfcmF0aW8gPSByYXRpbzEvcmF0aW8yXG4gICAgLy99IGVsc2Uge1xuICAgIC8vICAgIGJldF92YWxfcmF0aW8gPSAxXG4gICAgLy99XG5cbiAgICB0aW1lX3F1ZXN0aW9uX3N0YXJ0ID0gRGF0ZS5ub3coKVxuICAgICQoXCIjcHJvZ3Jlc3NcIikudGV4dChgUHJvZ3Jlc3M6ICR7cXVlc3Rpb25faSArIDF9IC8gJHtkYXRhLmxlbmd0aH1gKVxufVxuXG4vLyBnZXQgdXNlciBpZCBhbmQgbG9hZCBxdWV1ZVxuLy8gdHJ5IHRvIHNlZSBpZiBzdGFydCBvdmVycmlkZSB3YXMgcGFzc2VkXG5jb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuY29uc3Qgc3RhcnRPdmVycmlkZSA9IHVybFBhcmFtcy5nZXQoJ3N0YXJ0Jyk7XG5jb25zdCBVSURGcm9tVVJMID0gdXJsUGFyYW1zLmdldChcInVpZFwiKVxuZ2xvYmFsVGhpcy51cmxfZGF0YSA9IHBhcmFtc1RvT2JqZWN0KHVybFBhcmFtcy5lbnRyaWVzKCkpXG5cbmlmIChVSURGcm9tVVJMICE9IG51bGwpIHtcbiAgICBnbG9iYWxUaGlzLnVpZCA9IFVJREZyb21VUkwgYXMgc3RyaW5nXG4gICAgaWYgKGdsb2JhbFRoaXMudWlkID09IFwicHJvbGlmaWNfcmFuZG9tXCIpIHtcbiAgICAgICAgbGV0IHF1ZXVlX2lkID0gYCR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApfWAucGFkU3RhcnQoMywgXCIwXCIpXG4gICAgICAgIGdsb2JhbFRoaXMudWlkID0gYCR7dXJsUGFyYW1zLmdldChcInByb2xpZmljX3F1ZXVlX25hbWVcIil9XyR7cXVldWVfaWR9YFxuICAgIH1cbn0gZWxzZSBpZiAoREVWTU9ERSkge1xuICAgIGdsb2JhbFRoaXMudWlkID0gXCJkZW1vXCJcbn0gZWxzZSB7XG4gICAgbGV0IFVJRF9tYXliZTogYW55ID0gbnVsbFxuICAgIHdoaWxlIChVSURfbWF5YmUgPT0gbnVsbCkge1xuICAgICAgICBVSURfbWF5YmUgPSBwcm9tcHQoXCJFbnRlciB5b3VyIHVzZXIgaWQuIFBsZWFzZSBnZXQgaW4gdG91Y2ggaWYgeW91IHdlcmUgbm90IGFzc2lnbmVkIGFuIGlkIGJ1dCB3aXNoIHRvIHBhcnRpY2lwYXRlIGluIHRoaXMgZXhwZXJpbWVudC5cIilcbiAgICB9XG4gICAgZ2xvYmFsVGhpcy51aWQgPSBVSURfbWF5YmUhXG59XG5cbi8vIHZlcnNpb24gZm9yIHBhcGVyXG5pZiAoREVWTU9ERSkge1xuICAgIE1PQ0tNT0RFID0gdHJ1ZVxufSBlbHNlIGlmIChnbG9iYWxUaGlzLnVybF9kYXRhWydzZXNzaW9uX2lkJ10uc3RhcnRzV2l0aChcImRlbW9cIikpIHtcbiAgICBNT0NLTU9ERSA9IHRydWVcbn1cblxuY29uc29sZS5sb2coXCJSdW5uaW5nIHdpdGggVUlEXCIsIGdsb2JhbFRoaXMudWlkKVxubG9hZF9kYXRhKCkuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgIC8vYWxlcnQoXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coZ2xvYmFsVGhpcy51aWQhKVxuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxufVxuKS50aGVuKChuZXdfZGF0YSkgPT4ge1xuICAgIGRhdGEgPSBuZXdfZGF0YVxuICAgIGlmIChzdGFydE92ZXJyaWRlICE9IG51bGwpIHtcbiAgICAgICAgcXVlc3Rpb25faSA9IHBhcnNlSW50KHN0YXJ0T3ZlcnJpZGUpIC0gMVxuICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0aW5nIGZyb21cIiwgcXVlc3Rpb25faSlcbiAgICB9XG4gICAgLy8gbmV4dF9xdWVzdGlvbigpXG4gICAgbmV4dF9pbnN0cnVjdGlvbnMoMClcbiAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5zaG93KClcbiAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuaGlkZSgpXG59KVxuXG5jb25zb2xlLmxvZyhcIlN0YXJ0aW5nIHNlc3Npb24gd2l0aCBVSUQ6XCIsIGdsb2JhbFRoaXMudWlkISlcblxubGV0IGFsZXJ0X2FjdGl2ZSA9IGZhbHNlXG5kb2N1bWVudC5vbnZpc2liaWxpdHljaGFuZ2UgPSAoKSA9PiB7XG4gICAgaWYgKCFhbGVydF9hY3RpdmUpIHtcbiAgICAgICAgY291bnRfZXhpdGVkX3BhZ2UgKz0gMVxuICAgICAgICBhbGVydF9hY3RpdmUgPSB0cnVlXG4gICAgICAgIC8vaWYgKCEoZ2xvYmFsVGhpcy51aWQhLnN0YXJ0c1dpdGgoXCJkZW1vXCIpKSkge1xuICAgICAgICAvLyAgICBhbGVydChcIlBsZWFzZSBkb24ndCBsZWF2ZSB0aGUgcGFnZS4gSWYgeW91IGRvIHNvIGFnYWluLCB3ZSBtYXkgcmVzdHJpY3QgcGF5aW5nIHlvdS5cIilcbiAgICAgICAgLy99XG4gICAgICAgIGFsZXJ0X2FjdGl2ZSA9IGZhbHNlXG4gICAgfVxufSIsImZ1bmN0aW9uIHBhcmFtc1RvT2JqZWN0KGVudHJpZXMpIHtcbiAgY29uc3QgcmVzdWx0ID0ge31cbiAgLy8gZWFjaCAnZW50cnknIGlzIGEgW2tleSwgdmFsdWVdIHR1cHBsZVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyBwYXJhbXNUb09iamVjdCB9Il0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU0VSVkVSX0xPR19ST09UIiwiYXN5bmMiLCJsb2dfZGF0YSIsImRhdGEiLCJNT0NLTU9ERSIsImNvbnNvbGUiLCJsb2ciLCJnbG9iYWxUaGlzIiwidXJsX2RhdGEiLCJ1aWQiLCJyZXN1bHQiLCIkIiwiYWpheCIsIkpTT04iLCJzdHJpbmdpZnkiLCJwcm9qZWN0IiwicGF5bG9hZCIsInR5cGUiLCJjb250ZW50VHlwZSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInNsZWVwIiwiZSIsImZpbmFsX3VzZXJfZGVjaXNpb24iLCJ0aW1lX3F1ZXN0aW9uX3N0YXJ0IiwicXVlc3Rpb25faSIsInF1ZXN0aW9uIiwiYWNjZXNzZWRfZXhwbGFuYXRpb24iLCJhY2Nlc3NlZF9zb3VyY2VzIiwiYWNjZXNzZWRfaW5kaXZpZHVhbF9zb3VyY2UiLCJiYWxhbmNlIiwidGltZV90b19hY2Nlc3NfZXhwbGFuYXRpb24iLCJ0aW1lX3RvX2FjY2Vzc19zb3VyY2VzIiwidGltZV90b19hY2Nlc3NfaW5kaXZpZHVhbF9zb3VyY2UiLCJ0aW1lX2ZpbmFsX2RlY2lzaW9uIiwiaW5zdHJ1Y3Rpb25faSIsImNvdW50X2V4aXRlZF9wYWdlIiwic2hvd1NvdXJjZSIsInNvdXJjZV9udW0iLCJkaXYiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJkaXNwbGF5IiwiYnV0dG9uX2RpdiIsImNsYXNzTmFtZSIsIkRhdGUiLCJub3ciLCJhdHRyIiwidXBkYXRlVXNlckRlY2lzaW9uIiwidXNlcl9kZWNpc2lvbiIsInNob3ciLCJyZW1vdmVBdHRyIiwibmV4dF9pbnN0cnVjdGlvbnMiLCJpbmNyZW1lbnQiLCJ2YWwiLCJoaWRlIiwibmV4dF9xdWVzdGlvbiIsImNoaWxkcmVuIiwiZWFjaCIsIl8iLCJlbCIsImkiLCJsZW5ndGgiLCJ0ZXh0IiwidG9GaXhlZCIsImh0bWwiLCJhaV9wcmVkaWN0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uIiwibG9nZ2VkX2RhdGEiLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsInN0YXJ0T3ZlcnJpZGUiLCJVSURGcm9tVVJMIiwiZW50cmllcyIsInZhbHVlIiwicGFyYW1zVG9PYmplY3QiLCJxdWV1ZV9pZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBhZFN0YXJ0IiwiVUlEX21heWJlIiwicHJvbXB0Iiwic3RhcnRzV2l0aCIsImdldEpTT04iLCJsb2FkX2RhdGEiLCJjYXRjaCIsIl9lcnJvciIsInJlbG9hZCIsInRoZW4iLCJuZXdfZGF0YSIsInBhcnNlSW50IiwiYWxlcnRfYWN0aXZlIiwib252aXNpYmlsaXR5Y2hhbmdlIl0sInNvdXJjZVJvb3QiOiIifQ==