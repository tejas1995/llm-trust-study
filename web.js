(()=>{"use strict";var e={d:(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{o:()=>i});let t="https://tejassrinivasan.pythonanywhere.com/";var i=!1,n=[];let o,a,r=-1,s=null,l=!1,c=!1,d=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],_=0,u=-1,b=-1,m=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],p=-1,g=0,v=0;function h(e){if(-1!=p)return;const t=document.getElementById(`source_${e}_span`);t&&(t.style.display="block");const i=document.getElementById(`source_${e}_dropbtn`);i&&(i.className="arrow down"),d[e]=!0,m[e]=Date.now()-a,$(`#source_${e}_titlebar`).attr("disabled","true"),$(`#source_${e}_titlebar`).attr("activedecision","true")}function w(e){if(-1!=r){o=!!e,s.gt_label==o&&(_+=.1),p=Date.now()-a,$("#ai_explanation_titlebar").attr("disabled","true"),$("#view_sources_titlebar").attr("disabled","true");for(let e=0;e<10;e++)$(`#source_${e}_titlebar`).attr("disabled","true");$("#button_next").show(),$("#button_next").removeAttr("disabled"),$("#button_user_decision_claimtrue").attr("disabled","true"),$("#button_user_decision_claimfalse").attr("disabled","true"),e?(o=!0,$("#button_user_decision_claimtrue").attr("activedecision","true")):(o=!1,$("#button_user_decision_claimfalse").attr("activedecision","true"))}}function y(e){g+=e,0==g?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),g>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==g&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),f()),$("#main_box_instructions").children(":not(input)").each(((e,t)=>{$(t).hide()})),$(`#instructions_${g}`).show()}function f(){$("#button_user_decision_claimtrue").removeAttr("activedecision"),$("#button_user_decision_claimfalse").removeAttr("activedecision"),$("#button_user_decision_claimtrue").removeAttr("disabled"),$("#button_user_decision_claimfalse").removeAttr("disabled"),$("#ai_explanation_dropbtn").removeAttr("disabled"),$("#ai_explanation_dropbtn").removeAttr("activedecision"),$("#ai_explanation_dropbtn").attr("class","arrow right"),$("#ai_explanation_titlebar").removeAttr("disabled"),$("#ai_explanation_titlebar").removeAttr("activedecision"),$("#ai_explanation_dropdown").hide(),$("#view_sources_dropbtn").removeAttr("disabled"),$("#view_sources_dropbtn").removeAttr("activedecision"),$("#view_sources_dropbtn").attr("class","arrow right"),$("#view_sources_titlebar").removeAttr("disabled"),$("#view_sources_titlebar").removeAttr("activedecision"),$("#all_sources_div").hide();for(let e=0;e<10;e++)$(`#source_${e}_span`).hide(),$(`#source_${e}_dropbtn`).removeAttr("disabled"),$(`#source_${e}_dropbtn`).removeAttr("activedecision"),$(`#source_${e}_dropbtn`).attr("class","arrow right"),$(`#source_${e}_titlebar`).removeAttr("disabled"),$(`#source_${e}_titlebar`).removeAttr("activedecision");if(l=!1,c=!1,d=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],u=-1,b=-1,m=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],p=-1,$("#button_next").hide(),r+=1,r>=n.length)return $("#main_box_experiment").hide(),void(i?$("#main_box_end_mock").show():$("#main_box_end").show());s=n[r],$("#claim_span").html(s.claim);let e=s.llm_prediction?"The claim is true.":"The claim is false.";$("#ai_prediction_span").html(e),$("#ai_confidence_span").html(s.llm_confidence),$("#ai_explanation_span").html(s.llm_explanation);for(let e=0;e<s.sources.length;e++)$(`#source_${e}_span`).html(s.sources[e]);a=Date.now(),$("#progress").text(`Progress: ${r+1} / ${n.length}`)}document.getElementById("ai_explanation_titlebar")?.addEventListener("click",(function(){if(-1!=p)return;const e=document.getElementById("ai_explanation_dropdown");e&&(e.style.display="block");const t=document.getElementById("ai_explanation_dropbtn");t&&(t.className="arrow vanish"),l=!0,u=Date.now()-a,$("#ai_explanation_titlebar").attr("disabled","true"),$("#ai_explanation_titlebar").attr("activedecision","true")})),document.getElementById("view_sources_titlebar")?.addEventListener("click",(function(){if(-1!=p)return;const e=document.getElementById("all_sources_div");e&&(e.style.display="block");const t=document.getElementById("view_sources_dropbtn");t&&(t.className="arrow vanish"),c=!0,b=Date.now()-a,$("#view_sources_titlebar").attr("disabled","true"),$("#view_sources_titlebar").attr("activedecision","true")})),document.getElementById("source_0_titlebar")?.addEventListener("click",(()=>h(0))),document.getElementById("source_1_titlebar")?.addEventListener("click",(()=>h(1))),document.getElementById("source_2_titlebar")?.addEventListener("click",(()=>h(2))),document.getElementById("source_3_titlebar")?.addEventListener("click",(()=>h(3))),document.getElementById("source_4_titlebar")?.addEventListener("click",(()=>h(4))),document.getElementById("source_5_titlebar")?.addEventListener("click",(()=>h(5))),document.getElementById("source_6_titlebar")?.addEventListener("click",(()=>h(6))),document.getElementById("source_7_titlebar")?.addEventListener("click",(()=>h(7))),document.getElementById("source_8_titlebar")?.addEventListener("click",(()=>h(8))),document.getElementById("source_9_titlebar")?.addEventListener("click",(()=>h(9))),$("#button_user_decision_claimtrue").on("click",(()=>w(!0))),$("#button_user_decision_claimfalse").on("click",(()=>w(!1))),$("#button_instructions_next").on("click",(()=>y(1))),$("#button_instructions_prev").on("click",(()=>y(-1))),$("#button_next").on("click",(()=>{if(-1!=r){let e={question_i:r,user_balance_post_interaction:_,final_user_decision:o,accessed_explanation:l,accessed_sources:c,accessed_individual_source:d};e.times={access_explanation:u,access_sources:b,access_individual_source:m,final_decision:p},e.question=s,e.count_exited_page=v,async function(e){if(i)console.log("logged (mock)",e);else{e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="trialrun_studies"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let i=await $.ajax(t+"log",{data:JSON.stringify({project:"llm-trust-study/"+e.url_data.study_id,uid:globalThis.uid+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((e=>setTimeout(e,2e3)))}(),i}catch(e){console.log(e)}}}(e),v=0}f()}));const x=new URLSearchParams(window.location.search),E=x.get("start"),k=x.get("uid");if(globalThis.url_data=function(e){const t={};for(const[i,n]of e)t[i]=n;return t}(x.entries()),null!=k){if(globalThis.uid=k,"prolific_random"==globalThis.uid){let e=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${x.get("prolific_queue_name")}_${e}`}}else{let e=null;for(;null==e;)e=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=e}globalThis.uid.startsWith("demo_paper")&&(i=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((e=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((e=>{n=e,null!=E&&(r=parseInt(E)-1,console.log("Starting from",r)),y(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let I=!1;document.onvisibilitychange=()=>{I||(v+=1,I=!0,I=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,