(()=>{"use strict";let e="https://tejassrinivasan.pythonanywhere.com/";async function t(t){t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="trialrun_studies"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",e+"log");try{let i=await $.ajax(e+"log",{data:JSON.stringify({project:"llm-trust-study/"+t.url_data.study_id,uid:globalThis.uid+"_"+t.url_data.prolific_id,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((e=>setTimeout(e,2e3)))}(),i}catch(e){console.log(e)}}var i=!1,o=[];let n,a,s=-1,r=null,c=!1,l=!1,d=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],_=0,u=-1,b=-1,m=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],p=-1,v=0,h=0;function g(e){if(-1!=p)return;const t=document.getElementById(`source_${e}_span`);t&&(t.style.display="block");const i=document.getElementById(`source_${e}_dropbtn`);i&&(i.className="arrow down"),d[e]=!0,m[e]=Date.now()-a,$(`#source_${e}_titlebar`).attr("disabled","true"),$(`#source_${e}_titlebar`).attr("activedecision","true")}function w(e){if(-1!=s){n=!!e,p=Date.now()-a,$("#ai_explanation_titlebar").attr("disabled","true"),$("#view_sources_titlebar").attr("disabled","true");for(let e=0;e<10;e++)$(`#source_${e}_titlebar`).attr("disabled","true");$("#button_next").show(),$("#button_next").removeAttr("disabled"),s>=19&&($("#button_quit").show(),$("#button_quit").removeAttr("disabled")),e?(n=!0,$("#button_user_decision_claimtrue").attr("activedecision","true"),$("#button_user_decision_claimfalse").attr("activedecision","false")):(n=!1,$("#button_user_decision_claimfalse").attr("activedecision","true"),$("#button_user_decision_claimtrue").attr("activedecision","false"))}}function x(e){v+=e,0==v?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),v>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==v&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),f()),$("#main_box_instructions").children(":not(input)").each(((e,t)=>{$(t).hide()})),$(`#instructions_${v}`).show()}function f(){$("#button_user_decision_claimtrue").removeAttr("activedecision"),$("#button_user_decision_claimfalse").removeAttr("activedecision"),$("#button_user_decision_claimtrue").removeAttr("disabled"),$("#button_user_decision_claimfalse").removeAttr("disabled"),$("#ai_explanation_dropbtn").removeAttr("disabled"),$("#ai_explanation_dropbtn").removeAttr("activedecision"),$("#ai_explanation_dropbtn").attr("class","arrow right"),$("#ai_explanation_titlebar").removeAttr("disabled"),$("#ai_explanation_titlebar").removeAttr("activedecision"),$("#ai_explanation_dropdown").hide(),$("#view_sources_dropbtn").removeAttr("disabled"),$("#view_sources_dropbtn").removeAttr("activedecision"),$("#view_sources_dropbtn").attr("class","arrow right"),$("#view_sources_titlebar").removeAttr("disabled"),$("#view_sources_titlebar").removeAttr("activedecision"),$("#all_sources_div").hide();for(let e=0;e<10;e++)$(`#source_${e}_span`).hide(),$(`#source_${e}_dropbtn`).removeAttr("disabled"),$(`#source_${e}_dropbtn`).removeAttr("activedecision"),$(`#source_${e}_dropbtn`).attr("class","arrow right"),$(`#source_${e}_titlebar`).removeAttr("disabled"),$(`#source_${e}_titlebar`).removeAttr("activedecision");if(c=!1,l=!1,d=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],u=-1,b=-1,m=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],p=-1,$("#button_next").hide(),$("#button_quit").hide(),s+=1,s>=o.length)return $("#main_box_experiment").hide(),void(i?($("#reward_box_mock").text(`Your total reward is $${_.toFixed(2)} (${s+1} questions answered).`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${_.toFixed(2)} (${s+1} questions answered).`),$("#reward_box").show(),$("#main_box_end").show()));r=o[s],$("#claim_span").html(r.claim);let e=r.llm_prediction?"The claim is true.":"The claim is false.";$("#ai_prediction_span").html(e),$("#ai_confidence_span").html(r.llm_confidence),$("#ai_explanation_span").html(r.llm_explanation);for(let e=0;e<r.sources.length;e++)$(`#source_${e}_span`).html(r.sources[e]);a=Date.now(),$("#progress").text(`Progress: ${s+1} / ${o.length}`)}document.getElementById("ai_explanation_titlebar")?.addEventListener("click",(function(){if(-1!=p)return;const e=document.getElementById("ai_explanation_dropdown");e&&(e.style.display="block");const t=document.getElementById("ai_explanation_dropbtn");t&&(t.className="arrow vanish"),c=!0,u=Date.now()-a,$("#ai_explanation_titlebar").attr("disabled","true"),$("#ai_explanation_titlebar").attr("activedecision","true")})),document.getElementById("view_sources_titlebar")?.addEventListener("click",(function(){if(-1!=p)return;const e=document.getElementById("all_sources_div");e&&(e.style.display="block");const t=document.getElementById("view_sources_dropbtn");t&&(t.className="arrow vanish"),l=!0,b=Date.now()-a,$("#view_sources_titlebar").attr("disabled","true"),$("#view_sources_titlebar").attr("activedecision","true")})),document.getElementById("source_0_titlebar")?.addEventListener("click",(()=>g(0))),document.getElementById("source_1_titlebar")?.addEventListener("click",(()=>g(1))),document.getElementById("source_2_titlebar")?.addEventListener("click",(()=>g(2))),document.getElementById("source_3_titlebar")?.addEventListener("click",(()=>g(3))),document.getElementById("source_4_titlebar")?.addEventListener("click",(()=>g(4))),document.getElementById("source_5_titlebar")?.addEventListener("click",(()=>g(5))),document.getElementById("source_6_titlebar")?.addEventListener("click",(()=>g(6))),document.getElementById("source_7_titlebar")?.addEventListener("click",(()=>g(7))),document.getElementById("source_8_titlebar")?.addEventListener("click",(()=>g(8))),document.getElementById("source_9_titlebar")?.addEventListener("click",(()=>g(9))),$("#button_user_decision_claimtrue").on("click",(()=>w(!0))),$("#button_user_decision_claimfalse").on("click",(()=>w(!1))),$("#button_instructions_next").on("click",(()=>x(1))),$("#button_instructions_prev").on("click",(()=>x(-1))),$("#button_next").on("click",(()=>{if(r.gt_label==n&&(_+=.1),-1!=s){let e={question_i:s,user_balance_post_interaction:_,final_user_decision:n,accessed_explanation:c,accessed_sources:l,accessed_individual_source:d};e.times={access_explanation:u,access_sources:b,access_individual_source:m,final_decision:p},e.question=r,e.count_exited_page=h,t(e),h=0}f()})),$("#button_quit").on("click",(()=>{if(r.gt_label==n&&(_+=.1),-1!=s){let e={question_i:s,user_balance_post_interaction:_,final_user_decision:n,accessed_explanation:c,accessed_sources:l,accessed_individual_source:d};e.times={access_explanation:u,access_sources:b,access_individual_source:m,final_decision:p},e.question=r,e.count_exited_page=h,t(e),h=0}$("#main_box_experiment").hide(),i?($("#reward_box_mock").text(`Your total reward is $${_.toFixed(2)} (${s+1} questions answered).`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${_.toFixed(2)} (${s+1} questions answered).`),$("#reward_box").show(),$("#main_box_end").show())}));const y=new URLSearchParams(window.location.search),E=y.get("start"),k=y.get("uid");if(globalThis.url_data=function(e){const t={};for(const[i,o]of e)t[i]=o;return t}(y.entries()),null!=k){if(globalThis.uid=k,"prolific_random"==globalThis.uid){let e=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${y.get("prolific_queue_name")}_${e}`}}else{let e=null;for(;null==e;)e=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=e}globalThis.url_data.session_id.startsWith("demo")&&(i=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((e=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((e=>{o=e,null!=E&&(s=parseInt(E)-1,console.log("Starting from",s)),x(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let I=!1;document.onvisibilitychange=()=>{I||(h+=1,I=!0,I=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxJQUFNaUYsQyxDQU1WckYsV0FBV0MsU0FBcUIsV0FBRXNGLFdBQVcsVUFDcERwRSxHQUFXLEdBR2ZqQixRQUFRQyxJQUFJLG1CQUFvQkgsV0FBV0ksS0Q3WnBDUCxpQkFLSCxhQUhtQlMsRUFBRWtGLFFBQ2pCLGdCQUFnQnhGLFdBQVdJLGNBQWN1QyxLQUFLQyxRQUd0RCxDQ3daQTZDLEdBQVlDLE9BQU9DLElBRWZ6RixRQUFRQyxJQUFJLG9CQUNaRCxRQUFRQyxJQUFJSCxXQUFXSSxLQUN2QmtFLE9BQU9DLFNBQVNxQixRQUFRLElBRTFCQyxNQUFNQyxJQUNKL0YsRUFBTytGLEVBQ2MsTUFBakJyQixJQUNBbkQsRUFBYXlFLFNBQVN0QixHQUFpQixFQUN2Q3ZFLFFBQVFDLElBQUksZ0JBQWlCbUIsSUFHakM0QixFQUFrQixHQUNsQjVDLEVBQUUsMEJBQTBCMEMsT0FDNUIxQyxFQUFFLGlDQUFpQytDLE1BQU0sSUFHN0NuRCxRQUFRQyxJQUFJLDZCQUE4QkgsV0FBV0ksS0FFckQsSUFBSTRGLEdBQWUsRUFDbkIzRCxTQUFTNEQsbUJBQXFCLEtBQ3JCRCxJQUNEL0QsR0FBcUIsRUFDckIrRCxHQUFlLEVBSWZBLEdBQWUsRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb25uZWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFVk1PREUgfSBmcm9tICcuL2dsb2JhbHMnXG5pbXBvcnQgeyBNT0NLTU9ERSB9IGZyb20gJy4vbWFpbidcblxubGV0IFNFUlZFUl9MT0dfUk9PVCA9IERFVk1PREUgPyBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMC9cIiA6IFwiaHR0cHM6Ly90ZWphc3NyaW5pdmFzYW4ucHl0aG9uYW55d2hlcmUuY29tL1wiXG5cbmFzeW5jIGZ1bmN0aW9uIHNsZWVwKG1zOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRfZGF0YSgpOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIGluY2x1ZGUgdGltZXN0YW1wIHNvIHRoYXQgdGhpbmdzIGRvbid0IGdldCBjYWNoZWRcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgJC5nZXRKU09OKFxuICAgICAgICBgYmFrZWRfcXVldWVzLyR7Z2xvYmFsVGhpcy51aWR9Lmpzb24/dD0ke0RhdGUubm93KCl9YCxcbiAgICApXG4gICAgcmV0dXJuIHJlc3VsdFxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvZ19kYXRhKGRhdGEpOiBQcm9taXNlPGFueT4ge1xuICAgIC8vaWYgKE1PQ0tNT0RFKSB7XG4gICAgLy8gICAgY29uc29sZS5sb2coXCJsb2dnZWQgKG1vY2spXCIsIGRhdGEpXG4gICAgLy8gICAgcmV0dXJuXG4gICAgLy99XG4gICAgXG4gICAgZGF0YVtcInVybF9kYXRhXCJdID0gZ2xvYmFsVGhpcy51cmxfZGF0YVxuICAgIGNvbnNvbGUubG9nKFwiRGF0YVwiKVxuICAgIGlmICghKFwic3R1ZHlfaWRcIiBpbiBkYXRhWyd1cmxfZGF0YSddKSkge1xuICAgICAgICBkYXRhWyd1cmxfZGF0YSddW1wic3R1ZHlfaWRcIl0gPSBcInRyaWFscnVuX3N0dWRpZXNcIlxuICAgIH1cbiAgICBkYXRhW1widXJsX2RhdGFcIl1bXCJxdWV1ZV9pZFwiXSA9IGdsb2JhbFRoaXMudWlkXG4gICAgY29uc29sZS5sb2coXCJsb2dnZWRcIiwgZGF0YSlcbiAgICBjb25zb2xlLmxvZyhcIkxvZ2dpbmcgdG9cIiwgU0VSVkVSX0xPR19ST09UICsgXCJsb2dcIilcblxuICAgIHRyeSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCAkLmFqYXgoXG4gICAgICAgICAgICBTRVJWRVJfTE9HX1JPT1QgKyBcImxvZ1wiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogXCJsbG0tdHJ1c3Qtc3R1ZHkvXCIrZGF0YVsndXJsX2RhdGEnXVsnc3R1ZHlfaWQnXSxcbiAgICAgICAgICAgICAgICAgICAgdWlkOiBnbG9iYWxUaGlzLnVpZCtcIl9cIitkYXRhWyd1cmxfZGF0YSddWydwcm9saWZpY19pZCddLFxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBhd2FpdCBzbGVlcCgyMDAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICB9XG59IiwiaW1wb3J0IHsgREVWTU9ERSB9IGZyb20gXCIuL2dsb2JhbHNcIlxuZXhwb3J0IHZhciBVSUQ6IHN0cmluZ1xuZXhwb3J0IHZhciBNT0NLTU9ERTogYm9vbGVhbiA9IGZhbHNlXG5pbXBvcnQgeyBsb2FkX2RhdGEsIGxvZ19kYXRhIH0gZnJvbSAnLi9jb25uZWN0b3InXG5pbXBvcnQgeyBwYXJhbXNUb09iamVjdCB9IGZyb20gXCIuL3V0aWxzXCJcblxudmFyIGRhdGE6IGFueVtdID0gW11cbmxldCBxdWVzdGlvbl9pID0gLTFcbmxldCBxdWVzdGlvbjogYW55ID0gbnVsbFxubGV0IGZpbmFsX3VzZXJfZGVjaXNpb246IGJvb2xlYW5cbmxldCBhY2Nlc3NlZF9leHBsYW5hdGlvbjogYm9vbGVhbiA9IGZhbHNlXG5sZXQgYWNjZXNzZWRfc291cmNlczogYm9vbGVhbiA9IGZhbHNlXG5sZXQgYWNjZXNzZWRfaW5kaXZpZHVhbF9zb3VyY2U6IGFueVtdID0gW2ZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlXVxubGV0IGJhbGFuY2UgPSAwXG5sZXQgdGltZV9xdWVzdGlvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV90b19hY2Nlc3NfZXhwbGFuYXRpb246IG51bWJlciA9IC0xXG5sZXQgdGltZV90b19hY2Nlc3Nfc291cmNlczogbnVtYmVyID0gLTFcbmxldCB0aW1lX3RvX2FjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZTogYW55W10gPSBbLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTFdXG5sZXQgdGltZV9maW5hbF9kZWNpc2lvbjogbnVtYmVyID0gLTFcbmxldCBpbnN0cnVjdGlvbl9pOiBudW1iZXIgPSAwXG5sZXQgY291bnRfZXhpdGVkX3BhZ2U6IG51bWJlciA9IDBcblxuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHRocm93IG1lc3NhZ2UgfHwgXCJBc3NlcnRpb24gZmFpbGVkXCI7XG4gICAgfVxufVxuXG4vLyBGdW5jdGlvbiB0byB0b2dnbGUgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGRpdiBlbGVtZW50XG5mdW5jdGlvbiBzaG93RXhwbGFuYXRpb24oKSB7XG4gICAgaWYgKHRpbWVfZmluYWxfZGVjaXNpb24gIT0gLTEpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBkaXYgZWxlbWVudCBieSBpdHMgSURcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWlfZXhwbGFuYXRpb25fZHJvcGRvd24nKTtcbiAgICBpZiAoZGl2KSB7XG4gICAgICAgIC8vIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eVxuICAgICAgICBkaXYuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuICAgIGNvbnN0IGJ1dHRvbl9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWlfZXhwbGFuYXRpb25fZHJvcGJ0bicpO1xuICAgIGlmIChidXR0b25fZGl2KSB7XG4gICAgICAgIC8vQ2hhbmdlIHRoZSBjbGFzcyB0byBhcnJvdyBkb3duXG4gICAgICAgIGJ1dHRvbl9kaXYuY2xhc3NOYW1lID0gJ2Fycm93IHZhbmlzaCc7XG4gICAgfVxuICAgIGFjY2Vzc2VkX2V4cGxhbmF0aW9uID0gdHJ1ZVxuICAgIHRpbWVfdG9fYWNjZXNzX2V4cGxhbmF0aW9uID0gRGF0ZS5ub3coKSAtIHRpbWVfcXVlc3Rpb25fc3RhcnRcblxuICAgIC8vJChcIiNhaV9leHBsYW5hdGlvbl9kcm9wZG93blwiKS50b2dnbGUoKVxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fdGl0bGViYXJcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fdGl0bGViYXJcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxuICB9XG4gIFxuLy8gRXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBidXR0b24gY2xpY2tcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhaV9leHBsYW5hdGlvbl90aXRsZWJhcicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dFeHBsYW5hdGlvbik7XG5cbmZ1bmN0aW9uIHNob3dBbGxTb3VyY2VzKCkge1xuICAgIGlmICh0aW1lX2ZpbmFsX2RlY2lzaW9uICE9IC0xKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIEdldCB0aGUgZGl2IGVsZW1lbnQgYnkgaXRzIElEXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FsbF9zb3VyY2VzX2RpdicpO1xuICAgIGlmIChkaXYpIHtcbiAgICAgICAgLy8gVG9nZ2xlIHRoZSB2aXNpYmlsaXR5XG4gICAgICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG4gICAgY29uc3QgYnV0dG9uX2RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3X3NvdXJjZXNfZHJvcGJ0bicpO1xuICAgIGlmIChidXR0b25fZGl2KSB7XG4gICAgICAgIC8vQ2hhbmdlIHRoZSBjbGFzcyB0byBhcnJvdyB2YW5pc2hcbiAgICAgICAgYnV0dG9uX2Rpdi5jbGFzc05hbWUgPSAnYXJyb3cgdmFuaXNoJztcbiAgICB9XG4gICAgYWNjZXNzZWRfc291cmNlcyA9IHRydWVcbiAgICB0aW1lX3RvX2FjY2Vzc19zb3VyY2VzID0gRGF0ZS5ub3coKSAtIHRpbWVfcXVlc3Rpb25fc3RhcnRcblxuICAgIC8vJChcIiNhaV9leHBsYW5hdGlvbl9kcm9wZG93blwiKS50b2dnbGUoKVxuICAgICQoXCIjdmlld19zb3VyY2VzX3RpdGxlYmFyXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAkKFwiI3ZpZXdfc291cmNlc190aXRsZWJhclwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG59XG5cbi8vIEV2ZW50IGxpc3RlbmVyIGZvciB0aGUgYnV0dG9uIGNsaWNrXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlld19zb3VyY2VzX3RpdGxlYmFyJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvd0FsbFNvdXJjZXMpO1xuXG5mdW5jdGlvbiBzaG93U291cmNlKHNvdXJjZV9udW06IG51bWJlcikge1xuICAgIGlmICh0aW1lX2ZpbmFsX2RlY2lzaW9uICE9IC0xKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBcbiAgICAvLyBHZXQgdGhlIGRpdiBlbGVtZW50IGJ5IGl0cyBJRFxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBzb3VyY2VfJHtzb3VyY2VfbnVtfV9zcGFuYCk7XG4gICAgaWYgKGRpdikge1xuICAgICAgICAvLyBUb2dnbGUgdGhlIHZpc2liaWxpdHlcbiAgICAgICAgZGl2LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cbiAgICBjb25zdCBidXR0b25fZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHNvdXJjZV8ke3NvdXJjZV9udW19X2Ryb3BidG5gKTtcbiAgICBpZiAoYnV0dG9uX2Rpdikge1xuICAgICAgICAvL0NoYW5nZSB0aGUgY2xhc3MgdG8gYXJyb3cgZG93blxuICAgICAgICBidXR0b25fZGl2LmNsYXNzTmFtZSA9ICdhcnJvdyBkb3duJztcbiAgICB9XG4gICAgYWNjZXNzZWRfaW5kaXZpZHVhbF9zb3VyY2Vbc291cmNlX251bV0gPSB0cnVlXG4gICAgdGltZV90b19hY2Nlc3NfaW5kaXZpZHVhbF9zb3VyY2Vbc291cmNlX251bV0gPSBEYXRlLm5vdygpIC0gdGltZV9xdWVzdGlvbl9zdGFydFxuICAgIC8vJChcIiNhaV9leHBsYW5hdGlvbl9kcm9wZG93blwiKS50b2dnbGUoKVxuICAgICQoYCNzb3VyY2VfJHtzb3VyY2VfbnVtfV90aXRsZWJhcmApLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAkKGAjc291cmNlXyR7c291cmNlX251bX1fdGl0bGViYXJgKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG59XG5cbi8vIEV2ZW50IGxpc3RlbmVyIGZvciB0aGUgYnV0dG9uIGNsaWNrXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlXzBfdGl0bGViYXInKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzaG93U291cmNlKDApKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VfMV90aXRsZWJhcicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHNob3dTb3VyY2UoMSkpO1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZV8yX3RpdGxlYmFyJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2hvd1NvdXJjZSgyKSk7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlXzNfdGl0bGViYXInKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzaG93U291cmNlKDMpKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VfNF90aXRsZWJhcicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHNob3dTb3VyY2UoNCkpO1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZV81X3RpdGxlYmFyJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2hvd1NvdXJjZSg1KSk7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlXzZfdGl0bGViYXInKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzaG93U291cmNlKDYpKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2VfN190aXRsZWJhcicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHNob3dTb3VyY2UoNykpO1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NvdXJjZV84X3RpdGxlYmFyJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2hvd1NvdXJjZSg4KSk7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc291cmNlXzlfdGl0bGViYXInKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzaG93U291cmNlKDkpKTtcblxuZnVuY3Rpb24gdXBkYXRlVXNlckRlY2lzaW9uKHVzZXJfZGVjaXNpb246IGJvb2xlYW4pIHtcbiAgICBpZiAocXVlc3Rpb25faSAhPSAtMSkge1xuICAgICAgICBmaW5hbF91c2VyX2RlY2lzaW9uID0gdXNlcl9kZWNpc2lvbiA/IHRydWUgOiBmYWxzZVxuXG4gICAgICAgIHRpbWVfZmluYWxfZGVjaXNpb24gPSBEYXRlLm5vdygpIC0gdGltZV9xdWVzdGlvbl9zdGFydFxuXG4gICAgICAgICQoXCIjYWlfZXhwbGFuYXRpb25fdGl0bGViYXJcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICAgICAkKFwiI3ZpZXdfc291cmNlc190aXRsZWJhclwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgICAgIGZvciAobGV0IHNvdXJjZV9udW0gPSAwOyBzb3VyY2VfbnVtIDwgMTA7IHNvdXJjZV9udW0rKykge1xuICAgICAgICAgICAgJChgI3NvdXJjZV8ke3NvdXJjZV9udW19X3RpdGxlYmFyYCkuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICAgICB9XG5cbiAgICAgICAgJChcIiNidXR0b25fbmV4dFwiKS5zaG93KClcbiAgICAgICAgJChcIiNidXR0b25fbmV4dFwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAgICAgaWYgKHF1ZXN0aW9uX2kgPj0gMTkpIHtcbiAgICAgICAgICAgICQoJyNidXR0b25fcXVpdCcpLnNob3coKVxuICAgICAgICAgICAgJCgnI2J1dHRvbl9xdWl0JykucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgICAgIH1cbiAgICAgICAgLy8kKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltdHJ1ZVwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgICAgIC8vJChcIiNidXR0b25fdXNlcl9kZWNpc2lvbl9jbGFpbWZhbHNlXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICAgICAgaWYgKHVzZXJfZGVjaXNpb24pIHtcbiAgICAgICAgICAgIGZpbmFsX3VzZXJfZGVjaXNpb24gPSB0cnVlXG4gICAgICAgICAgICAkKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltdHJ1ZVwiKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgICAgICAgICAkKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltZmFsc2VcIikuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwiZmFsc2VcIilcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZpbmFsX3VzZXJfZGVjaXNpb24gPSBmYWxzZVxuICAgICAgICAgICAgJChcIiNidXR0b25fdXNlcl9kZWNpc2lvbl9jbGFpbWZhbHNlXCIpLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcbiAgICAgICAgICAgICQoXCIjYnV0dG9uX3VzZXJfZGVjaXNpb25fY2xhaW10cnVlXCIpLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcImZhbHNlXCIpXG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuJChcIiNidXR0b25fdXNlcl9kZWNpc2lvbl9jbGFpbXRydWVcIikub24oXCJjbGlja1wiLCAoKSA9PiB1cGRhdGVVc2VyRGVjaXNpb24odHJ1ZSkpXG4kKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltZmFsc2VcIikub24oXCJjbGlja1wiLCAoKSA9PiB1cGRhdGVVc2VyRGVjaXNpb24oZmFsc2UpKVxuXG5cbmZ1bmN0aW9uIG5leHRfaW5zdHJ1Y3Rpb25zKGluY3JlbWVudDogbnVtYmVyKSB7XG4gICAgaW5zdHJ1Y3Rpb25faSArPSBpbmNyZW1lbnRcblxuICAgIGlmIChpbnN0cnVjdGlvbl9pID09IDApIHtcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX3ByZXZcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgIH1cbiAgICBpZiAoaW5zdHJ1Y3Rpb25faSA+PSA2KSB7XG4gICAgICAgICQoXCIjaW5zdHJ1Y3Rpb25zX2FuZF9kZWNvcmF0aW9uc1wiKS5zaG93KClcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX25leHRcIikudmFsKFwiU3RhcnQgc3R1ZHlcIilcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuaGlkZSgpXG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLnZhbChcIk5leHRcIilcbiAgICB9XG4gICAgaWYgKGluc3RydWN0aW9uX2kgPT0gNykge1xuICAgICAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5oaWRlKClcbiAgICAgICAgJChcIiNtYWluX2JveF9leHBlcmltZW50XCIpLnNob3coKVxuICAgICAgICBuZXh0X3F1ZXN0aW9uKClcbiAgICB9XG5cbiAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5jaGlsZHJlbihcIjpub3QoaW5wdXQpXCIpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgICAgICQoZWwpLmhpZGUoKVxuICAgIH0pXG4gICAgJChgI2luc3RydWN0aW9uc18ke2luc3RydWN0aW9uX2l9YCkuc2hvdygpXG59XG4kKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS5vbihcImNsaWNrXCIsICgpID0+IG5leHRfaW5zdHJ1Y3Rpb25zKCsxKSlcbiQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbmV4dF9pbnN0cnVjdGlvbnMoLTEpKVxuXG4kKFwiI2J1dHRvbl9uZXh0XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4ge1xuXG4gICAgbGV0IGd0X2xhYmVsOiBib29sZWFuID0gcXVlc3Rpb24hW1wiZ3RfbGFiZWxcIl1cbiAgICBsZXQgdXNlcl9pc19jb3JyZWN0OiBib29sZWFuID0gZ3RfbGFiZWwgPT0gZmluYWxfdXNlcl9kZWNpc2lvblxuICAgIGlmICh1c2VyX2lzX2NvcnJlY3QpIHtcbiAgICAgICAgYmFsYW5jZSArPSAwLjFcbiAgICB9XG5cbiAgICBpZiAocXVlc3Rpb25faSAhPSAtMSkge1xuICAgICAgICBsZXQgbG9nZ2VkX2RhdGEgPSB7XG4gICAgICAgICAgICBcInF1ZXN0aW9uX2lcIjogcXVlc3Rpb25faSxcbiAgICAgICAgICAgIFwidXNlcl9iYWxhbmNlX3Bvc3RfaW50ZXJhY3Rpb25cIjogYmFsYW5jZSxcbiAgICAgICAgICAgIFwiZmluYWxfdXNlcl9kZWNpc2lvblwiOiBmaW5hbF91c2VyX2RlY2lzaW9uLFxuICAgICAgICAgICAgXCJhY2Nlc3NlZF9leHBsYW5hdGlvblwiOiBhY2Nlc3NlZF9leHBsYW5hdGlvbixcbiAgICAgICAgICAgIFwiYWNjZXNzZWRfc291cmNlc1wiOiBhY2Nlc3NlZF9zb3VyY2VzLFxuICAgICAgICAgICAgXCJhY2Nlc3NlZF9pbmRpdmlkdWFsX3NvdXJjZVwiOiBhY2Nlc3NlZF9pbmRpdmlkdWFsX3NvdXJjZSxcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ2dlZF9kYXRhWyd0aW1lcyddID0ge1xuICAgICAgICAgICAgXCJhY2Nlc3NfZXhwbGFuYXRpb25cIjogdGltZV90b19hY2Nlc3NfZXhwbGFuYXRpb24sXG4gICAgICAgICAgICBcImFjY2Vzc19zb3VyY2VzXCI6IHRpbWVfdG9fYWNjZXNzX3NvdXJjZXMsXG4gICAgICAgICAgICBcImFjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZVwiOiB0aW1lX3RvX2FjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZSxcbiAgICAgICAgICAgIFwiZmluYWxfZGVjaXNpb25cIjogdGltZV9maW5hbF9kZWNpc2lvbixcbiAgICAgICAgfVxuICAgICAgICBsb2dnZWRfZGF0YVsncXVlc3Rpb24nXSA9IHF1ZXN0aW9uXG4gICAgICAgIGxvZ2dlZF9kYXRhWydjb3VudF9leGl0ZWRfcGFnZSddID0gY291bnRfZXhpdGVkX3BhZ2VcbiAgICAgICAgbG9nX2RhdGEobG9nZ2VkX2RhdGEpXG4gICAgICAgIGNvdW50X2V4aXRlZF9wYWdlID0gMFxuICAgIH1cbiAgICBcblxuICAgIG5leHRfcXVlc3Rpb24oKVxufSk7XG5cbiQoXCIjYnV0dG9uX3F1aXRcIikub24oXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgbGV0IGd0X2xhYmVsOiBib29sZWFuID0gcXVlc3Rpb24hW1wiZ3RfbGFiZWxcIl1cbiAgICBsZXQgdXNlcl9pc19jb3JyZWN0OiBib29sZWFuID0gZ3RfbGFiZWwgPT0gZmluYWxfdXNlcl9kZWNpc2lvblxuICAgIGlmICh1c2VyX2lzX2NvcnJlY3QpIHtcbiAgICAgICAgYmFsYW5jZSArPSAwLjFcbiAgICB9XG5cbiAgICBpZiAocXVlc3Rpb25faSAhPSAtMSkge1xuICAgICAgICBsZXQgbG9nZ2VkX2RhdGEgPSB7XG4gICAgICAgICAgICBcInF1ZXN0aW9uX2lcIjogcXVlc3Rpb25faSxcbiAgICAgICAgICAgIFwidXNlcl9iYWxhbmNlX3Bvc3RfaW50ZXJhY3Rpb25cIjogYmFsYW5jZSxcbiAgICAgICAgICAgIFwiZmluYWxfdXNlcl9kZWNpc2lvblwiOiBmaW5hbF91c2VyX2RlY2lzaW9uLFxuICAgICAgICAgICAgXCJhY2Nlc3NlZF9leHBsYW5hdGlvblwiOiBhY2Nlc3NlZF9leHBsYW5hdGlvbixcbiAgICAgICAgICAgIFwiYWNjZXNzZWRfc291cmNlc1wiOiBhY2Nlc3NlZF9zb3VyY2VzLFxuICAgICAgICAgICAgXCJhY2Nlc3NlZF9pbmRpdmlkdWFsX3NvdXJjZVwiOiBhY2Nlc3NlZF9pbmRpdmlkdWFsX3NvdXJjZSxcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ2dlZF9kYXRhWyd0aW1lcyddID0ge1xuICAgICAgICAgICAgXCJhY2Nlc3NfZXhwbGFuYXRpb25cIjogdGltZV90b19hY2Nlc3NfZXhwbGFuYXRpb24sXG4gICAgICAgICAgICBcImFjY2Vzc19zb3VyY2VzXCI6IHRpbWVfdG9fYWNjZXNzX3NvdXJjZXMsXG4gICAgICAgICAgICBcImFjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZVwiOiB0aW1lX3RvX2FjY2Vzc19pbmRpdmlkdWFsX3NvdXJjZSxcbiAgICAgICAgICAgIFwiZmluYWxfZGVjaXNpb25cIjogdGltZV9maW5hbF9kZWNpc2lvbixcbiAgICAgICAgfVxuICAgICAgICBsb2dnZWRfZGF0YVsncXVlc3Rpb24nXSA9IHF1ZXN0aW9uXG4gICAgICAgIGxvZ2dlZF9kYXRhWydjb3VudF9leGl0ZWRfcGFnZSddID0gY291bnRfZXhpdGVkX3BhZ2VcbiAgICAgICAgbG9nX2RhdGEobG9nZ2VkX2RhdGEpXG4gICAgICAgIGNvdW50X2V4aXRlZF9wYWdlID0gMFxuICAgIH1cblxuICAgICQoXCIjbWFpbl9ib3hfZXhwZXJpbWVudFwiKS5oaWRlKClcbiAgICBpZiAoTU9DS01PREUpIHtcbiAgICAgICAgJCgnI3Jld2FyZF9ib3hfbW9jaycpLnRleHQoYFlvdXIgdG90YWwgcmV3YXJkIGlzICQke2JhbGFuY2UudG9GaXhlZCgyKX0gKCR7cXVlc3Rpb25faSsxfSBxdWVzdGlvbnMgYW5zd2VyZWQpLmApXG4gICAgICAgICQoJyNyZXdhcmRfYm94X21vY2snKS5zaG93KClcbiAgICAgICAgJChcIiNtYWluX2JveF9lbmRfbW9ja1wiKS5zaG93KClcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKCcjcmV3YXJkX2JveCcpLnRleHQoYFlvdXIgdG90YWwgcmV3YXJkIGlzICQke2JhbGFuY2UudG9GaXhlZCgyKX0gKCR7cXVlc3Rpb25faSsxfSBxdWVzdGlvbnMgYW5zd2VyZWQpLmApXG4gICAgICAgICQoJyNyZXdhcmRfYm94Jykuc2hvdygpXG4gICAgICAgICQoXCIjbWFpbl9ib3hfZW5kXCIpLnNob3coKVxuICAgIH1cbiAgICByZXR1cm5cbn0pXG5cblxuXG5mdW5jdGlvbiBzaG93X3Jlc3VsdCgpIHtcblxuXG4gICAgLy9sZXQgYWlfaXNfY29ycmVjdDogYm9vbGVhbiA9IHF1ZXN0aW9uIVtcImxsbV9pc19jb3JyZWN0XCJdXG4gICAgLy9sZXQgbWVzc2FnZSA9IFwiQ29ycmVjdCBhbnN3ZXI6IDxiPk9wdGlvbiBcIiArIGNvcnJlY3Rfb3B0aW9uICsgXCI8L2I+Ljxicj5cIlxuICAgIC8vaWYgKHVzZXJfaXNfY29ycmVjdCkge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gXCJZb3UgcGlja2VkIE9wdGlvbiBcIiArIGZpbmFsX3VzZXJfZGVjaXNpb24gKyBcIiwgd2hpY2ggd2FzIDxzcGFuIGNsYXNzPSdjb2xvcl9jb3JyZWN0Jz48Yj5jb3JyZWN0PC9iPjwvc3Bhbj4uPGJyPlwiXG4gICAgLy99XG4gICAgLy9lbHNlIHtcbiAgICAvLyAgICBtZXNzYWdlICs9IFwiWW91IHBpY2tlZCBPcHRpb24gXCIgKyBmaW5hbF91c2VyX2RlY2lzaW9uICsgXCIsIHdoaWNoIHdhcyA8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5pbmNvcnJlY3Q8L2I+PC9zcGFuPi48YnI+XCJcbiAgICAvL31cbiAgICAvL2lmIChhaV9pc19jb3JyZWN0KSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBcIlRoZSBBSSBwaWNrZWQgT3B0aW9uIFwiICsgcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSArIFwiLCB3aGljaCB3YXMgPHNwYW4gY2xhc3M9J2NvbG9yX2NvcnJlY3QnPjxiPmNvcnJlY3Q8Yj48L3NwYW4+Ljxicj5cIlxuICAgIC8vfVxuICAgIC8vZWxzZSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBcIlRoZSBBSSBwaWNrZWQgT3B0aW9uIFwiICsgcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSArIFwiLCB3aGljaCB3YXMgPHNwYW4gY2xhc3M9J2NvbG9yX2luY29ycmVjdCc+PGI+aW5jb3JyZWN0PC9iPjwvc3Bhbj4uPGJyPlwiXG4gICAgLy99XG4gICAgLy9pZiAodXNlcl9pc19jb3JyZWN0KSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBcIjxzcGFuIGNsYXNzPSdjb2xvcl9jb3JyZWN0Jz48Yj5Zb3UgcmVjZWl2ZSBhIHJld2FyZCBvZiAkMC4xMC48L2I+PC9zcGFuPlwiXG4gICAgLy8gICAgYmFsYW5jZSArPSAwLjFcbiAgICAvL31cbiAgICAvL2Vsc2Uge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gXCI8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5Zb3UgZG8gbm90IHJlY2VpdmUgYW55IHJld2FyZC48L2I+PC9zcGFuPlwiXG4gICAgLy99XG4gICAgLy9tZXNzYWdlICs9IFwiPGJyPlwiXG4gICAgLy9pZiAoc3VjY2Vzcykge1xuICAgIC8vICAgIG1lc3NhZ2UgKz0gYFlvdSBnYWluICQkeyhiZXRfdmFsKmJldF92YWxfcmF0aW8pLnRvRml4ZWQoMil9LmBcbiAgICAvLyAgICBiYWxhbmNlICs9IGJldF92YWwqYmV0X3ZhbF9yYXRpb1xuICAgIC8vfSBlbHNlIHtcbiAgICAvLyAgICBtZXNzYWdlICs9IGBZb3UgbG9zZSAkJHsoYmV0X3ZhbC8xLjApLnRvRml4ZWQoMil9LmBcbiAgICAvLyAgICBiYWxhbmNlIC09IGJldF92YWwvMS4wXG4gICAgLy8gICAgYmFsYW5jZSA9IE1hdGgubWF4KDAsIGJhbGFuY2UpXG4gICAgLy99XG4gICAgLy8kKFwiI2JhbGFuY2VcIikudGV4dChgQmFsYW5jZTogJCR7YmFsYW5jZS50b0ZpeGVkKDIpfSArICQxLjBgKVxuICAgIC8vJChcIiNyZXN1bHRfc3BhblwiKS5odG1sKG1lc3NhZ2UpXG4gICAgLy8vLyQoXCIjYnV0dG9uX25leHRcIikuc2hvdygpXG4gICAgLy8kKFwiI3Jlc3VsdF9zcGFuXCIpLnNob3coKVxuICAgIC8vJChcIiNidXR0b25fcGxhY2VfYmV0XCIpLmhpZGUoKVxuXG4gICAgLy8kKCcjcmFuZ2VfdmFsJykuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxufVxuXG4vLyQoXCIjYnV0dG9uX3BsYWNlX2JldFwiKS5vbihcImNsaWNrXCIsIHNob3dfcmVzdWx0KVxuXG5mdW5jdGlvbiBuZXh0X3F1ZXN0aW9uKCkge1xuICAgIC8vIHJlc3RvcmUgcHJldmlvdXMgc3RhdGUgb2YgVUlcblxuICAgICQoXCIjYnV0dG9uX3VzZXJfZGVjaXNpb25fY2xhaW10cnVlXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYnV0dG9uX3VzZXJfZGVjaXNpb25fY2xhaW1mYWxzZVwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltdHJ1ZVwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI2J1dHRvbl91c2VyX2RlY2lzaW9uX2NsYWltZmFsc2VcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG5cbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX2Ryb3BidG5cIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNhaV9leHBsYW5hdGlvbl9kcm9wYnRuXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fZHJvcGJ0blwiKS5hdHRyKFwiY2xhc3NcIiwgXCJhcnJvdyByaWdodFwiKVxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fdGl0bGViYXJcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNhaV9leHBsYW5hdGlvbl90aXRsZWJhclwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX2Ryb3Bkb3duXCIpLmhpZGUoKVxuXG4gICAgJChcIiN2aWV3X3NvdXJjZXNfZHJvcGJ0blwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI3ZpZXdfc291cmNlc19kcm9wYnRuXCIpLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICQoXCIjdmlld19zb3VyY2VzX2Ryb3BidG5cIikuYXR0cihcImNsYXNzXCIsIFwiYXJyb3cgcmlnaHRcIilcbiAgICAkKFwiI3ZpZXdfc291cmNlc190aXRsZWJhclwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI3ZpZXdfc291cmNlc190aXRsZWJhclwiKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAkKFwiI2FsbF9zb3VyY2VzX2RpdlwiKS5oaWRlKClcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICAkKGAjc291cmNlXyR7aX1fc3BhbmApLmhpZGUoKVxuICAgICAgICAkKGAjc291cmNlXyR7aX1fZHJvcGJ0bmApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICAgICAkKGAjc291cmNlXyR7aX1fZHJvcGJ0bmApLnJlbW92ZUF0dHIoXCJhY3RpdmVkZWNpc2lvblwiKVxuICAgICAgICAkKGAjc291cmNlXyR7aX1fZHJvcGJ0bmApLmF0dHIoXCJjbGFzc1wiLCBcImFycm93IHJpZ2h0XCIpXG4gICAgICAgICQoYCNzb3VyY2VfJHtpfV90aXRsZWJhcmApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICAgICAkKGAjc291cmNlXyR7aX1fdGl0bGViYXJgKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICB9XG5cbiAgICBhY2Nlc3NlZF9leHBsYW5hdGlvbiA9IGZhbHNlXG4gICAgYWNjZXNzZWRfc291cmNlcyA9IGZhbHNlXG4gICAgYWNjZXNzZWRfaW5kaXZpZHVhbF9zb3VyY2UgPSBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdXG5cbiAgICB0aW1lX3RvX2FjY2Vzc19leHBsYW5hdGlvbiA9IC0xXG4gICAgdGltZV90b19hY2Nlc3Nfc291cmNlcyA9IC0xXG4gICAgdGltZV90b19hY2Nlc3NfaW5kaXZpZHVhbF9zb3VyY2UgPSBbLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTFdXG4gICAgdGltZV9maW5hbF9kZWNpc2lvbiA9IC0xXG4gICAgXG5cbiAgICAkKFwiI2J1dHRvbl9uZXh0XCIpLmhpZGUoKVxuICAgICQoJyNidXR0b25fcXVpdCcpLmhpZGUoKVxuICAgIC8vJChcIiNyYW5nZV92YWxcIikudmFsKHVzZXJfdHJ1c3QpXG5cbiAgICBxdWVzdGlvbl9pICs9IDFcbiAgICBpZiAocXVlc3Rpb25faSA+PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICAkKFwiI21haW5fYm94X2V4cGVyaW1lbnRcIikuaGlkZSgpXG4gICAgICAgIGlmIChNT0NLTU9ERSkge1xuICAgICAgICAgICAgJCgnI3Jld2FyZF9ib3hfbW9jaycpLnRleHQoYFlvdXIgdG90YWwgcmV3YXJkIGlzICQke2JhbGFuY2UudG9GaXhlZCgyKX0gKCR7cXVlc3Rpb25faSsxfSBxdWVzdGlvbnMgYW5zd2VyZWQpLmApXG4gICAgICAgICAgICAkKCcjcmV3YXJkX2JveF9tb2NrJykuc2hvdygpXG4gICAgICAgICAgICAkKFwiI21haW5fYm94X2VuZF9tb2NrXCIpLnNob3coKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCgnI3Jld2FyZF9ib3gnKS50ZXh0KGBZb3VyIHRvdGFsIHJld2FyZCBpcyAkJHtiYWxhbmNlLnRvRml4ZWQoMil9ICgke3F1ZXN0aW9uX2krMX0gcXVlc3Rpb25zIGFuc3dlcmVkKS5gKVxuICAgICAgICAgICAgJCgnI3Jld2FyZF9ib3gnKS5zaG93KClcbiAgICAgICAgICAgICQoXCIjbWFpbl9ib3hfZW5kXCIpLnNob3coKVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBxdWVzdGlvbiA9IGRhdGFbcXVlc3Rpb25faV1cblxuICAgICQoXCIjY2xhaW1fc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcImNsYWltXCJdKVxuICAgIGxldCBhaV9wcmVkaWN0aW9uID0gcXVlc3Rpb24hW1wibGxtX3ByZWRpY3Rpb25cIl0gPyBcIlRoZSBjbGFpbSBpcyB0cnVlLlwiIDogXCJUaGUgY2xhaW0gaXMgZmFsc2UuXCJcbiAgICAkKFwiI2FpX3ByZWRpY3Rpb25fc3BhblwiKS5odG1sKGFpX3ByZWRpY3Rpb24pXG4gICAgJChcIiNhaV9jb25maWRlbmNlX3NwYW5cIikuaHRtbChxdWVzdGlvbiFbXCJsbG1fY29uZmlkZW5jZVwiXSlcblxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcImxsbV9leHBsYW5hdGlvblwiXSlcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXN0aW9uIVtcInNvdXJjZXNcIl0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgJChgI3NvdXJjZV8ke2l9X3NwYW5gKS5odG1sKHF1ZXN0aW9uIVtcInNvdXJjZXNcIl1baV0pXG4gICAgfVxuXG4gICAgLy8gc2V0IGJldCB2YWx1ZSByYXRpb1xuICAgIC8vaWYocXVlc3Rpb24uaGFzT3duUHJvcGVydHkoXCJyZXdhcmRfcmF0aW9cIikpIHtcbiAgICAvLyAgICBsZXQgW3JhdGlvMSwgcmF0aW8yXSA9IHF1ZXN0aW9uW1wicmV3YXJkX3JhdGlvXCJdXG4gICAgLy8gICAgcmF0aW8xID0gTnVtYmVyKHJhdGlvMSlcbiAgICAvLyAgICByYXRpbzIgPSBOdW1iZXIocmF0aW8yKVxuICAgIC8vICAgIGJldF92YWxfcmF0aW8gPSByYXRpbzEvcmF0aW8yXG4gICAgLy99IGVsc2Uge1xuICAgIC8vICAgIGJldF92YWxfcmF0aW8gPSAxXG4gICAgLy99XG5cbiAgICB0aW1lX3F1ZXN0aW9uX3N0YXJ0ID0gRGF0ZS5ub3coKVxuICAgICQoXCIjcHJvZ3Jlc3NcIikudGV4dChgUHJvZ3Jlc3M6ICR7cXVlc3Rpb25faSArIDF9IC8gJHtkYXRhLmxlbmd0aH1gKVxufVxuXG4vLyBnZXQgdXNlciBpZCBhbmQgbG9hZCBxdWV1ZVxuLy8gdHJ5IHRvIHNlZSBpZiBzdGFydCBvdmVycmlkZSB3YXMgcGFzc2VkXG5jb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuY29uc3Qgc3RhcnRPdmVycmlkZSA9IHVybFBhcmFtcy5nZXQoJ3N0YXJ0Jyk7XG5jb25zdCBVSURGcm9tVVJMID0gdXJsUGFyYW1zLmdldChcInVpZFwiKVxuZ2xvYmFsVGhpcy51cmxfZGF0YSA9IHBhcmFtc1RvT2JqZWN0KHVybFBhcmFtcy5lbnRyaWVzKCkpXG5cbmlmIChVSURGcm9tVVJMICE9IG51bGwpIHtcbiAgICBnbG9iYWxUaGlzLnVpZCA9IFVJREZyb21VUkwgYXMgc3RyaW5nXG4gICAgaWYgKGdsb2JhbFRoaXMudWlkID09IFwicHJvbGlmaWNfcmFuZG9tXCIpIHtcbiAgICAgICAgbGV0IHF1ZXVlX2lkID0gYCR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApfWAucGFkU3RhcnQoMywgXCIwXCIpXG4gICAgICAgIGdsb2JhbFRoaXMudWlkID0gYCR7dXJsUGFyYW1zLmdldChcInByb2xpZmljX3F1ZXVlX25hbWVcIil9XyR7cXVldWVfaWR9YFxuICAgIH1cbn0gZWxzZSBpZiAoREVWTU9ERSkge1xuICAgIGdsb2JhbFRoaXMudWlkID0gXCJkZW1vXCJcbn0gZWxzZSB7XG4gICAgbGV0IFVJRF9tYXliZTogYW55ID0gbnVsbFxuICAgIHdoaWxlIChVSURfbWF5YmUgPT0gbnVsbCkge1xuICAgICAgICBVSURfbWF5YmUgPSBwcm9tcHQoXCJFbnRlciB5b3VyIHVzZXIgaWQuIFBsZWFzZSBnZXQgaW4gdG91Y2ggaWYgeW91IHdlcmUgbm90IGFzc2lnbmVkIGFuIGlkIGJ1dCB3aXNoIHRvIHBhcnRpY2lwYXRlIGluIHRoaXMgZXhwZXJpbWVudC5cIilcbiAgICB9XG4gICAgZ2xvYmFsVGhpcy51aWQgPSBVSURfbWF5YmUhXG59XG5cbi8vIHZlcnNpb24gZm9yIHBhcGVyXG5pZiAoREVWTU9ERSkge1xuICAgIE1PQ0tNT0RFID0gdHJ1ZVxufSBlbHNlIGlmIChnbG9iYWxUaGlzLnVybF9kYXRhWydzZXNzaW9uX2lkJ10uc3RhcnRzV2l0aChcImRlbW9cIikpIHtcbiAgICBNT0NLTU9ERSA9IHRydWVcbn1cblxuY29uc29sZS5sb2coXCJSdW5uaW5nIHdpdGggVUlEXCIsIGdsb2JhbFRoaXMudWlkKVxubG9hZF9kYXRhKCkuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgIC8vYWxlcnQoXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coZ2xvYmFsVGhpcy51aWQhKVxuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxufVxuKS50aGVuKChuZXdfZGF0YSkgPT4ge1xuICAgIGRhdGEgPSBuZXdfZGF0YVxuICAgIGlmIChzdGFydE92ZXJyaWRlICE9IG51bGwpIHtcbiAgICAgICAgcXVlc3Rpb25faSA9IHBhcnNlSW50KHN0YXJ0T3ZlcnJpZGUpIC0gMVxuICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0aW5nIGZyb21cIiwgcXVlc3Rpb25faSlcbiAgICB9XG4gICAgLy8gbmV4dF9xdWVzdGlvbigpXG4gICAgbmV4dF9pbnN0cnVjdGlvbnMoMClcbiAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5zaG93KClcbiAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuaGlkZSgpXG59KVxuXG5jb25zb2xlLmxvZyhcIlN0YXJ0aW5nIHNlc3Npb24gd2l0aCBVSUQ6XCIsIGdsb2JhbFRoaXMudWlkISlcblxubGV0IGFsZXJ0X2FjdGl2ZSA9IGZhbHNlXG5kb2N1bWVudC5vbnZpc2liaWxpdHljaGFuZ2UgPSAoKSA9PiB7XG4gICAgaWYgKCFhbGVydF9hY3RpdmUpIHtcbiAgICAgICAgY291bnRfZXhpdGVkX3BhZ2UgKz0gMVxuICAgICAgICBhbGVydF9hY3RpdmUgPSB0cnVlXG4gICAgICAgIC8vaWYgKCEoZ2xvYmFsVGhpcy51aWQhLnN0YXJ0c1dpdGgoXCJkZW1vXCIpKSkge1xuICAgICAgICAvLyAgICBhbGVydChcIlBsZWFzZSBkb24ndCBsZWF2ZSB0aGUgcGFnZS4gSWYgeW91IGRvIHNvIGFnYWluLCB3ZSBtYXkgcmVzdHJpY3QgcGF5aW5nIHlvdS5cIilcbiAgICAgICAgLy99XG4gICAgICAgIGFsZXJ0X2FjdGl2ZSA9IGZhbHNlXG4gICAgfVxufSIsImZ1bmN0aW9uIHBhcmFtc1RvT2JqZWN0KGVudHJpZXMpIHtcbiAgY29uc3QgcmVzdWx0ID0ge31cbiAgLy8gZWFjaCAnZW50cnknIGlzIGEgW2tleSwgdmFsdWVdIHR1cHBsZVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyBwYXJhbXNUb09iamVjdCB9Il0sIm5hbWVzIjpbIlNFUlZFUl9MT0dfUk9PVCIsImFzeW5jIiwibG9nX2RhdGEiLCJkYXRhIiwiZ2xvYmFsVGhpcyIsInVybF9kYXRhIiwiY29uc29sZSIsImxvZyIsInVpZCIsInJlc3VsdCIsIiQiLCJhamF4IiwiSlNPTiIsInN0cmluZ2lmeSIsInByb2plY3QiLCJwYXlsb2FkIiwidHlwZSIsImNvbnRlbnRUeXBlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Iiwic2xlZXAiLCJlIiwiTU9DS01PREUiLCJmaW5hbF91c2VyX2RlY2lzaW9uIiwidGltZV9xdWVzdGlvbl9zdGFydCIsInF1ZXN0aW9uX2kiLCJxdWVzdGlvbiIsImFjY2Vzc2VkX2V4cGxhbmF0aW9uIiwiYWNjZXNzZWRfc291cmNlcyIsImFjY2Vzc2VkX2luZGl2aWR1YWxfc291cmNlIiwiYmFsYW5jZSIsInRpbWVfdG9fYWNjZXNzX2V4cGxhbmF0aW9uIiwidGltZV90b19hY2Nlc3Nfc291cmNlcyIsInRpbWVfdG9fYWNjZXNzX2luZGl2aWR1YWxfc291cmNlIiwidGltZV9maW5hbF9kZWNpc2lvbiIsImluc3RydWN0aW9uX2kiLCJjb3VudF9leGl0ZWRfcGFnZSIsInNob3dTb3VyY2UiLCJzb3VyY2VfbnVtIiwiZGl2IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwiZGlzcGxheSIsImJ1dHRvbl9kaXYiLCJjbGFzc05hbWUiLCJEYXRlIiwibm93IiwiYXR0ciIsInVwZGF0ZVVzZXJEZWNpc2lvbiIsInVzZXJfZGVjaXNpb24iLCJzaG93IiwicmVtb3ZlQXR0ciIsIm5leHRfaW5zdHJ1Y3Rpb25zIiwiaW5jcmVtZW50IiwidmFsIiwiaGlkZSIsIm5leHRfcXVlc3Rpb24iLCJjaGlsZHJlbiIsImVhY2giLCJfIiwiZWwiLCJpIiwibGVuZ3RoIiwidGV4dCIsInRvRml4ZWQiLCJodG1sIiwiYWlfcHJlZGljdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbiIsImxvZ2dlZF9kYXRhIiwidXJsUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdGFydE92ZXJyaWRlIiwiZ2V0IiwiVUlERnJvbVVSTCIsImVudHJpZXMiLCJrZXkiLCJ2YWx1ZSIsInBhcmFtc1RvT2JqZWN0IiwicXVldWVfaWQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwYWRTdGFydCIsIlVJRF9tYXliZSIsInByb21wdCIsInN0YXJ0c1dpdGgiLCJnZXRKU09OIiwibG9hZF9kYXRhIiwiY2F0Y2giLCJfZXJyb3IiLCJyZWxvYWQiLCJ0aGVuIiwibmV3X2RhdGEiLCJwYXJzZUludCIsImFsZXJ0X2FjdGl2ZSIsIm9udmlzaWJpbGl0eWNoYW5nZSJdLCJzb3VyY2VSb290IjoiIn0=